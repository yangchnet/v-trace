// Code generated by MockGen. DO NOT EDIT.
// Source: mq.go

// Package mq is a generated GoMock package.
package mq

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMq is a mock of Mq interface.
type MockMq struct {
	ctrl     *gomock.Controller
	recorder *MockMqMockRecorder
}

// MockMqMockRecorder is the mock recorder for MockMq.
type MockMqMockRecorder struct {
	mock *MockMq
}

// NewMockMq creates a new mock instance.
func NewMockMq(ctrl *gomock.Controller) *MockMq {
	mock := &MockMq{ctrl: ctrl}
	mock.recorder = &MockMqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMq) EXPECT() *MockMqMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMq) Ack(ctx context.Context, mq, group, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, mq, group, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMqMockRecorder) Ack(ctx, mq, group, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMq)(nil).Ack), ctx, mq, group, key)
}

// Add mocks base method.
func (m *MockMq) Add(ctx context.Context, mq, msgId, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, mq, msgId, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMqMockRecorder) Add(ctx, mq, msgId, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMq)(nil).Add), ctx, mq, msgId, key, value)
}

// CreateGroup mocks base method.
func (m *MockMq) CreateGroup(ctx context.Context, mq, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, mq, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockMqMockRecorder) CreateGroup(ctx, mq, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockMq)(nil).CreateGroup), ctx, mq, group)
}

// ReadGroup mocks base method.
func (m *MockMq) ReadGroup(ctx context.Context, mq, group, consumer string, count int64, start int) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGroup", ctx, mq, group, consumer, count, start)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGroup indicates an expected call of ReadGroup.
func (mr *MockMqMockRecorder) ReadGroup(ctx, mq, group, consumer, count, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGroup", reflect.TypeOf((*MockMq)(nil).ReadGroup), ctx, mq, group, consumer, count, start)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPublisher) Add(ctx context.Context, mq, msgId, key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, mq, msgId, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPublisherMockRecorder) Add(ctx, mq, msgId, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPublisher)(nil).Add), ctx, mq, msgId, key, value)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockConsumer) Ack(ctx context.Context, mq, group, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, mq, group, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockConsumerMockRecorder) Ack(ctx, mq, group, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockConsumer)(nil).Ack), ctx, mq, group, key)
}

// CreateGroup mocks base method.
func (m *MockConsumer) CreateGroup(ctx context.Context, mq, group string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, mq, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockConsumerMockRecorder) CreateGroup(ctx, mq, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockConsumer)(nil).CreateGroup), ctx, mq, group)
}

// ReadGroup mocks base method.
func (m *MockConsumer) ReadGroup(ctx context.Context, mq, group, consumer string, count int64, start int) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadGroup", ctx, mq, group, consumer, count, start)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadGroup indicates an expected call of ReadGroup.
func (mr *MockConsumerMockRecorder) ReadGroup(ctx, mq, group, consumer, count, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadGroup", reflect.TypeOf((*MockConsumer)(nil).ReadGroup), ctx, mq, group, consumer, count, start)
}
