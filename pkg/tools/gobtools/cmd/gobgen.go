package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
)

func main() {
	args := os.Args
	if len(args) < 1 {
		panic("no enough argument, want src file")
	}

	srcFile := args[1]
	dstFile := fmt.Sprintf("%s/register.go", filepath.Dir(srcFile))

	if err := os.Remove(dstFile); err != nil {
		panic(err)
	}

	fset := token.NewFileSet()
	path, err := filepath.Abs(srcFile)
	if err != nil {
		panic(err)
	}

	f, err := parser.ParseFile(fset, path, nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}

	structNames := make([]string, 0)
	for _, obj := range f.Scope.Objects {
		structNames = append(structNames, obj.Name)
	}

	if err := writeRegister(structNames, dstFile); err != nil {
		panic(err)
	}
}

func writeRegister(structNames []string, dstFile string) error {
	f, err := os.OpenFile(dstFile, os.O_CREATE|os.O_RDWR, 0o644)
	if err != nil {
		return err
	}
	defer f.Close()

	buf := bytes.Buffer{}
	if _, err := buf.WriteString(`// Code generated by gob tools. DO NOT EDIT.
	package db

	import (
		"encoding/gob"
	)

	func GobRegister() {`); err != nil {
		return err
	}

	for _, name := range structNames {
		if !(len(name) > 0 && name[0] >= 'A' && name[0] <= 'Z') {
			continue
		}
		// _, err = buf.WriteString(fmt.Sprintf(`gob.Register(%s{})
		// gob.Register(&%s{})
		// `, name, name))
		_, err = buf.WriteString(fmt.Sprintf("gob.Register(&%s{})\n", name))
		if err != nil {
			return err
		}
	}

	_, err = buf.WriteString(`}`)
	if err != nil {
		return err
	}

	fmtCode, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	_, err = f.Write(fmtCode)

	return err
}
