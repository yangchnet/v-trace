apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-conf
  labels:
    app: mysql
data:
  my.cnf: |
    [mysqld]
    port=13306
    bind-address = 0.0.0.0

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-ddl
data:
  ddl.sql: |
    CREATE DATABASE IF NOT EXISTS algo DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS chainmaker_ca DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS circ DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS echo DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS goods DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS iam DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS trans DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-env
data:
  passwd: insecure

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql-app
  ports:
    - port: 13306
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-app
spec:
  selector:
    matchLabels:
      app: mysql-app
  serviceName: mysql-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-app
    spec:
      containers:
        - name: mysql-app
          image: mysql:8.0
          ports:
            - containerPort: 13306
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: mysql-conf
              mountPath: /etc/mysql/my.cnf
            - name: mysql-ddl
              mountPath: /docker-entrypoint-initdb.d/
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mysql-env
                  key: passwd

      volumes:
        - name: mysql-conf
          configMap:
            name: mysql-conf
        - name: mysql-ddl
          configMap:
            name: mysql-ddl
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-data-pvc
        - name: mysql-env
          configMap:
            name: mysql-env
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-data
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: mysql-data-storage
  local:
    path: /home/lc/vtrace-data/mysql
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - node3
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql-data-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data-pvc
spec:
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: mysql-data-storage
