// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 模型不存在
func IsModelNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_MODEL_NOT_FOUND.String() && e.Code == 404
}

// 模型不存在
func ErrorModelNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_MODEL_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 调用模型失败
func IsModelPredictFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_MODEL_PREDICT_FAILED.String() && e.Code == 500
}

// 调用模型失败
func ErrorModelPredictFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, Error_MODEL_PREDICT_FAILED.String(), fmt.Sprintf(format, args...))
}

// 分类结果无法识别
func IsPredictResultUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_PREDICT_RESULT_UNAVAILABLE.String() && e.Code == 404
}

// 分类结果无法识别
func ErrorPredictResultUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_PREDICT_RESULT_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 原料不存在
func IsMaterialNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_MATERIAL_NOT_FOUND.String() && e.Code == 404
}

// 原料不存在
func ErrorMaterialNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_MATERIAL_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}
