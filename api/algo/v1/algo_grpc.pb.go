// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: algo/v1/algo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlgoServiceClient is the client API for AlgoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlgoServiceClient interface {
	// 获取算法模型支持的材料
	ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error)
	// 列出所有算法模型
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// 进行预测
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
}

type algoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlgoServiceClient(cc grpc.ClientConnInterface) AlgoServiceClient {
	return &algoServiceClient{cc}
}

func (c *algoServiceClient) ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error) {
	out := new(ListMaterialsResponse)
	err := c.cc.Invoke(ctx, "/algo.v1.AlgoService/ListMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/algo.v1.AlgoService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *algoServiceClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/algo.v1.AlgoService/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlgoServiceServer is the server API for AlgoService service.
// All implementations must embed UnimplementedAlgoServiceServer
// for forward compatibility
type AlgoServiceServer interface {
	// 获取算法模型支持的材料
	ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error)
	// 列出所有算法模型
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// 进行预测
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	mustEmbedUnimplementedAlgoServiceServer()
}

// UnimplementedAlgoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlgoServiceServer struct {
}

func (UnimplementedAlgoServiceServer) ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterials not implemented")
}
func (UnimplementedAlgoServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedAlgoServiceServer) Predict(context.Context, *PredictRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedAlgoServiceServer) mustEmbedUnimplementedAlgoServiceServer() {}

// UnsafeAlgoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlgoServiceServer will
// result in compilation errors.
type UnsafeAlgoServiceServer interface {
	mustEmbedUnimplementedAlgoServiceServer()
}

func RegisterAlgoServiceServer(s grpc.ServiceRegistrar, srv AlgoServiceServer) {
	s.RegisterService(&AlgoService_ServiceDesc, srv)
}

func _AlgoService_ListMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServiceServer).ListMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/algo.v1.AlgoService/ListMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServiceServer).ListMaterials(ctx, req.(*ListMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlgoService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/algo.v1.AlgoService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlgoService_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlgoServiceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/algo.v1.AlgoService/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlgoServiceServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlgoService_ServiceDesc is the grpc.ServiceDesc for AlgoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlgoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "algo.v1.AlgoService",
	HandlerType: (*AlgoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMaterials",
			Handler:    _AlgoService_ListMaterials_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _AlgoService_ListModels_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _AlgoService_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "algo/v1/algo.proto",
}
