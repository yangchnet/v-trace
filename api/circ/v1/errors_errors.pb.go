// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 创建流转记录失败
func IsCreateCircFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CREATE_CIRC_FAILED.String() && e.Code == 500
}

// 创建流转记录失败
func ErrorCreateCircFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, Error_CREATE_CIRC_FAILED.String(), fmt.Sprintf(format, args...))
}

// 流转记录不存在
func IsCircNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CIRC_NOT_FOUND.String() && e.Code == 404
}

// 流转记录不存在
func ErrorCircNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, Error_CIRC_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 参数错误
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_INVALID_PARAMS.String() && e.Code == 400
}

// 参数错误
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

// 流转记录已存在
func IsCircAlreadyExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_CIRC_ALREADY_EXIST.String() && e.Code == 400
}

// 流转记录已存在
func ErrorCircAlreadyExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_CIRC_ALREADY_EXIST.String(), fmt.Sprintf(format, args...))
}

// 当前操作者非产品所有者
func IsNotOwner(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Error_NOT_OWNER.String() && e.Code == 400
}

// 当前操作者非产品所有者
func ErrorNotOwner(format string, args ...interface{}) *errors.Error {
	return errors.New(400, Error_NOT_OWNER.String(), fmt.Sprintf(format, args...))
}
