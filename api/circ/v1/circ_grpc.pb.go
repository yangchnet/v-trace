// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: circ/v1/circ.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CircServiceClient is the client API for CircService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircServiceClient interface {
	// CreateCirc 新增流转记录
	CreateCirc(ctx context.Context, in *CreateCircRequest, opts ...grpc.CallOption) (*CreateCircResponse, error)
	// 批量流转
	BatchCirc(ctx context.Context, in *BatchCircRequest, opts ...grpc.CallOption) (*BatchCircResponse, error)
	// GetCirc 根据流转id获取流转记录
	GetCirc(ctx context.Context, in *GetCircRequest, opts ...grpc.CallOption) (*CircRecord, error)
	// 根据transId获取流转记录
	GetCircByTransId(ctx context.Context, in *GetCircByTransIdRequest, opts ...grpc.CallOption) (*CircRecord, error)
	// 根据商品id获取流转记录
	GetCircByGoodsId(ctx context.Context, in *GetCircByGoodsIdRequest, opts ...grpc.CallOption) (*GetCircByGoodsIdResponse, error)
	// 为商品生成transId
	TransId(ctx context.Context, in *TransIdRequest, opts ...grpc.CallOption) (*TransIdResponse, error)
	// 批量为商品生成transId
	BatchTransId(ctx context.Context, in *BatchTransIdRequest, opts ...grpc.CallOption) (*BatchTransIdResponse, error)
	// 更新流转记录状态
	UpdateCircStatus(ctx context.Context, in *UpdateCircStatusRequest, opts ...grpc.CallOption) (*UpdateCircStatusResponse, error)
}

type circServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircServiceClient(cc grpc.ClientConnInterface) CircServiceClient {
	return &circServiceClient{cc}
}

func (c *circServiceClient) CreateCirc(ctx context.Context, in *CreateCircRequest, opts ...grpc.CallOption) (*CreateCircResponse, error) {
	out := new(CreateCircResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/CreateCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) BatchCirc(ctx context.Context, in *BatchCircRequest, opts ...grpc.CallOption) (*BatchCircResponse, error) {
	out := new(BatchCircResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/BatchCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) GetCirc(ctx context.Context, in *GetCircRequest, opts ...grpc.CallOption) (*CircRecord, error) {
	out := new(CircRecord)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/GetCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) GetCircByTransId(ctx context.Context, in *GetCircByTransIdRequest, opts ...grpc.CallOption) (*CircRecord, error) {
	out := new(CircRecord)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/GetCircByTransId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) GetCircByGoodsId(ctx context.Context, in *GetCircByGoodsIdRequest, opts ...grpc.CallOption) (*GetCircByGoodsIdResponse, error) {
	out := new(GetCircByGoodsIdResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/GetCircByGoodsId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) TransId(ctx context.Context, in *TransIdRequest, opts ...grpc.CallOption) (*TransIdResponse, error) {
	out := new(TransIdResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/TransId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) BatchTransId(ctx context.Context, in *BatchTransIdRequest, opts ...grpc.CallOption) (*BatchTransIdResponse, error) {
	out := new(BatchTransIdResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/BatchTransId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *circServiceClient) UpdateCircStatus(ctx context.Context, in *UpdateCircStatusRequest, opts ...grpc.CallOption) (*UpdateCircStatusResponse, error) {
	out := new(UpdateCircStatusResponse)
	err := c.cc.Invoke(ctx, "/circ.v1.CircService/UpdateCircStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircServiceServer is the server API for CircService service.
// All implementations must embed UnimplementedCircServiceServer
// for forward compatibility
type CircServiceServer interface {
	// CreateCirc 新增流转记录
	CreateCirc(context.Context, *CreateCircRequest) (*CreateCircResponse, error)
	// 批量流转
	BatchCirc(context.Context, *BatchCircRequest) (*BatchCircResponse, error)
	// GetCirc 根据流转id获取流转记录
	GetCirc(context.Context, *GetCircRequest) (*CircRecord, error)
	// 根据transId获取流转记录
	GetCircByTransId(context.Context, *GetCircByTransIdRequest) (*CircRecord, error)
	// 根据商品id获取流转记录
	GetCircByGoodsId(context.Context, *GetCircByGoodsIdRequest) (*GetCircByGoodsIdResponse, error)
	// 为商品生成transId
	TransId(context.Context, *TransIdRequest) (*TransIdResponse, error)
	// 批量为商品生成transId
	BatchTransId(context.Context, *BatchTransIdRequest) (*BatchTransIdResponse, error)
	// 更新流转记录状态
	UpdateCircStatus(context.Context, *UpdateCircStatusRequest) (*UpdateCircStatusResponse, error)
	mustEmbedUnimplementedCircServiceServer()
}

// UnimplementedCircServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircServiceServer struct {
}

func (UnimplementedCircServiceServer) CreateCirc(context.Context, *CreateCircRequest) (*CreateCircResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCirc not implemented")
}
func (UnimplementedCircServiceServer) BatchCirc(context.Context, *BatchCircRequest) (*BatchCircResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCirc not implemented")
}
func (UnimplementedCircServiceServer) GetCirc(context.Context, *GetCircRequest) (*CircRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCirc not implemented")
}
func (UnimplementedCircServiceServer) GetCircByTransId(context.Context, *GetCircByTransIdRequest) (*CircRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircByTransId not implemented")
}
func (UnimplementedCircServiceServer) GetCircByGoodsId(context.Context, *GetCircByGoodsIdRequest) (*GetCircByGoodsIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCircByGoodsId not implemented")
}
func (UnimplementedCircServiceServer) TransId(context.Context, *TransIdRequest) (*TransIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransId not implemented")
}
func (UnimplementedCircServiceServer) BatchTransId(context.Context, *BatchTransIdRequest) (*BatchTransIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTransId not implemented")
}
func (UnimplementedCircServiceServer) UpdateCircStatus(context.Context, *UpdateCircStatusRequest) (*UpdateCircStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCircStatus not implemented")
}
func (UnimplementedCircServiceServer) mustEmbedUnimplementedCircServiceServer() {}

// UnsafeCircServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircServiceServer will
// result in compilation errors.
type UnsafeCircServiceServer interface {
	mustEmbedUnimplementedCircServiceServer()
}

func RegisterCircServiceServer(s grpc.ServiceRegistrar, srv CircServiceServer) {
	s.RegisterService(&CircService_ServiceDesc, srv)
}

func _CircService_CreateCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).CreateCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/CreateCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).CreateCirc(ctx, req.(*CreateCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_BatchCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).BatchCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/BatchCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).BatchCirc(ctx, req.(*BatchCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_GetCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).GetCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/GetCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).GetCirc(ctx, req.(*GetCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_GetCircByTransId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircByTransIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).GetCircByTransId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/GetCircByTransId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).GetCircByTransId(ctx, req.(*GetCircByTransIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_GetCircByGoodsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircByGoodsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).GetCircByGoodsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/GetCircByGoodsId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).GetCircByGoodsId(ctx, req.(*GetCircByGoodsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_TransId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).TransId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/TransId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).TransId(ctx, req.(*TransIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_BatchTransId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTransIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).BatchTransId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/BatchTransId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).BatchTransId(ctx, req.(*BatchTransIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CircService_UpdateCircStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCircStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircServiceServer).UpdateCircStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circ.v1.CircService/UpdateCircStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircServiceServer).UpdateCircStatus(ctx, req.(*UpdateCircStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CircService_ServiceDesc is the grpc.ServiceDesc for CircService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CircService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "circ.v1.CircService",
	HandlerType: (*CircServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCirc",
			Handler:    _CircService_CreateCirc_Handler,
		},
		{
			MethodName: "BatchCirc",
			Handler:    _CircService_BatchCirc_Handler,
		},
		{
			MethodName: "GetCirc",
			Handler:    _CircService_GetCirc_Handler,
		},
		{
			MethodName: "GetCircByTransId",
			Handler:    _CircService_GetCircByTransId_Handler,
		},
		{
			MethodName: "GetCircByGoodsId",
			Handler:    _CircService_GetCircByGoodsId_Handler,
		},
		{
			MethodName: "TransId",
			Handler:    _CircService_TransId_Handler,
		},
		{
			MethodName: "BatchTransId",
			Handler:    _CircService_BatchTransId_Handler,
		},
		{
			MethodName: "UpdateCircStatus",
			Handler:    _CircService_UpdateCircStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circ/v1/circ.proto",
}
