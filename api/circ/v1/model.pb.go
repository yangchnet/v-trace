// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: circ/v1/model.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CircType int32

const (
	// 生产
	CircType_produce CircType = 0
	// 一般流程
	CircType_process CircType = 1
	// 转交
	CircType_transfer CircType = 3
	// 核验
	CircType_exam CircType = 4
)

// Enum value maps for CircType.
var (
	CircType_name = map[int32]string{
		0: "produce",
		1: "process",
		3: "transfer",
		4: "exam",
	}
	CircType_value = map[string]int32{
		"produce":  0,
		"process":  1,
		"transfer": 3,
		"exam":     4,
	}
)

func (x CircType) Enum() *CircType {
	p := new(CircType)
	*p = x
	return p
}

func (x CircType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircType) Descriptor() protoreflect.EnumDescriptor {
	return file_circ_v1_model_proto_enumTypes[0].Descriptor()
}

func (CircType) Type() protoreflect.EnumType {
	return &file_circ_v1_model_proto_enumTypes[0]
}

func (x CircType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CircType.Descriptor instead.
func (CircType) EnumDescriptor() ([]byte, []int) {
	return file_circ_v1_model_proto_rawDescGZIP(), []int{0}
}

type RecordStatus int32

const (
	// 进行中
	RecordStatus_pending RecordStatus = 0
	// 已失败
	RecordStatus_failed RecordStatus = 1
	// 已成功
	RecordStatus_success RecordStatus = 2
)

// Enum value maps for RecordStatus.
var (
	RecordStatus_name = map[int32]string{
		0: "pending",
		1: "failed",
		2: "success",
	}
	RecordStatus_value = map[string]int32{
		"pending": 0,
		"failed":  1,
		"success": 2,
	}
)

func (x RecordStatus) Enum() *RecordStatus {
	p := new(RecordStatus)
	*p = x
	return p
}

func (x RecordStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_circ_v1_model_proto_enumTypes[1].Descriptor()
}

func (RecordStatus) Type() protoreflect.EnumType {
	return &file_circ_v1_model_proto_enumTypes[1]
}

func (x RecordStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordStatus.Descriptor instead.
func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return file_circ_v1_model_proto_rawDescGZIP(), []int{1}
}

type CircRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	// 流转主体id（一般为商品id）
	ObjectId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// 流转类型
	CircType CircType `protobuf:"varint,2,opt,name=circ_type,json=circType,proto3,enum=circ.v1.CircType" json:"circ_type,omitempty"`
	// 流转操作者
	Operator *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=Operator,proto3" json:"Operator,omitempty"`
	// from
	From *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// to
	To *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	// formValue
	FromValue *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	// txHash
	TxHash *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// transId
	TransId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	// times
	Times *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=times,proto3" json:"times,omitempty"`
	// status
	Status *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CircRecord) Reset() {
	*x = CircRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircRecord) ProtoMessage() {}

func (x *CircRecord) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircRecord.ProtoReflect.Descriptor instead.
func (*CircRecord) Descriptor() ([]byte, []int) {
	return file_circ_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *CircRecord) GetId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CircRecord) GetObjectId() *wrapperspb.Int64Value {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *CircRecord) GetCircType() CircType {
	if x != nil {
		return x.CircType
	}
	return CircType_produce
}

func (x *CircRecord) GetOperator() *wrapperspb.StringValue {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *CircRecord) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CircRecord) GetTo() *wrapperspb.StringValue {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CircRecord) GetFromValue() *wrapperspb.StringValue {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *CircRecord) GetTxHash() *wrapperspb.StringValue {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *CircRecord) GetTransId() *wrapperspb.StringValue {
	if x != nil {
		return x.TransId
	}
	return nil
}

func (x *CircRecord) GetTimes() *wrapperspb.Int64Value {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *CircRecord) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_circ_v1_model_proto protoreflect.FileDescriptor

var file_circ_v1_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x69, 0x72, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x04,
	0x0a, 0x0a, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x69, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x2c, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3b, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2a, 0x3c, 0x0a, 0x08, 0x43, 0x69, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x10,
	0x04, 0x2a, 0x34, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x65, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x76,
	0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_circ_v1_model_proto_rawDescOnce sync.Once
	file_circ_v1_model_proto_rawDescData = file_circ_v1_model_proto_rawDesc
)

func file_circ_v1_model_proto_rawDescGZIP() []byte {
	file_circ_v1_model_proto_rawDescOnce.Do(func() {
		file_circ_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_circ_v1_model_proto_rawDescData)
	})
	return file_circ_v1_model_proto_rawDescData
}

var file_circ_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_circ_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_circ_v1_model_proto_goTypes = []interface{}{
	(CircType)(0),                  // 0: circ.v1.CircType
	(RecordStatus)(0),              // 1: circ.v1.RecordStatus
	(*CircRecord)(nil),             // 2: circ.v1.CircRecord
	(*wrapperspb.Int64Value)(nil),  // 3: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 4: google.protobuf.StringValue
}
var file_circ_v1_model_proto_depIdxs = []int32{
	3,  // 0: circ.v1.CircRecord.id:type_name -> google.protobuf.Int64Value
	3,  // 1: circ.v1.CircRecord.object_id:type_name -> google.protobuf.Int64Value
	0,  // 2: circ.v1.CircRecord.circ_type:type_name -> circ.v1.CircType
	4,  // 3: circ.v1.CircRecord.Operator:type_name -> google.protobuf.StringValue
	4,  // 4: circ.v1.CircRecord.from:type_name -> google.protobuf.StringValue
	4,  // 5: circ.v1.CircRecord.to:type_name -> google.protobuf.StringValue
	4,  // 6: circ.v1.CircRecord.from_value:type_name -> google.protobuf.StringValue
	4,  // 7: circ.v1.CircRecord.tx_hash:type_name -> google.protobuf.StringValue
	4,  // 8: circ.v1.CircRecord.trans_id:type_name -> google.protobuf.StringValue
	3,  // 9: circ.v1.CircRecord.times:type_name -> google.protobuf.Int64Value
	4,  // 10: circ.v1.CircRecord.status:type_name -> google.protobuf.StringValue
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_circ_v1_model_proto_init() }
func file_circ_v1_model_proto_init() {
	if File_circ_v1_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_circ_v1_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circ_v1_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_circ_v1_model_proto_goTypes,
		DependencyIndexes: file_circ_v1_model_proto_depIdxs,
		EnumInfos:         file_circ_v1_model_proto_enumTypes,
		MessageInfos:      file_circ_v1_model_proto_msgTypes,
	}.Build()
	File_circ_v1_model_proto = out.File
	file_circ_v1_model_proto_rawDesc = nil
	file_circ_v1_model_proto_goTypes = nil
	file_circ_v1_model_proto_depIdxs = nil
}
