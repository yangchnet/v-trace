// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: circ/v1/circ.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCircRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transId 用于标记此次流转
	// 其格式为：[流转次数]-[产品id]-[流转时间]
	TransId string `protobuf:"bytes,2,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	// 流转类型
	CircType CircType `protobuf:"varint,3,opt,name=circ_type,json=circType,proto3,enum=circ.v1.CircType" json:"circ_type,omitempty"`
	// 流转执行者
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	// 实体来源用户
	// 流转类型为"produce"时，此字段为空
	// 流转类型为"process"、"exam"或"transfer"时，此字段为操作者本身用户名
	From *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// 实体目标用户
	// 流转类型为"produce"、"process", "exam"时，此字段为操作者
	// 流转类型为"transfer"时，此字段为要转交的用户的用户名
	To string `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	// 表单json数据
	FormInfo *wrapperspb.BytesValue `protobuf:"bytes,7,opt,name=form_info,json=formInfo,proto3" json:"form_info,omitempty"`
}

func (x *CreateCircRequest) Reset() {
	*x = CreateCircRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircRequest) ProtoMessage() {}

func (x *CreateCircRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircRequest.ProtoReflect.Descriptor instead.
func (*CreateCircRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCircRequest) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

func (x *CreateCircRequest) GetCircType() CircType {
	if x != nil {
		return x.CircType
	}
	return CircType_produce
}

func (x *CreateCircRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *CreateCircRequest) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CreateCircRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CreateCircRequest) GetFormInfo() *wrapperspb.BytesValue {
	if x != nil {
		return x.FormInfo
	}
	return nil
}

type CreateCircResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流转历史记录编号
	CircId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=circ_id,json=circId,proto3" json:"circ_id,omitempty"`
}

func (x *CreateCircResponse) Reset() {
	*x = CreateCircResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircResponse) ProtoMessage() {}

func (x *CreateCircResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircResponse.ProtoReflect.Descriptor instead.
func (*CreateCircResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCircResponse) GetCircId() *wrapperspb.Int64Value {
	if x != nil {
		return x.CircId
	}
	return nil
}

type BatchCircRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流转号
	TransIds []string `protobuf:"bytes,2,rep,name=trans_ids,json=transIds,proto3" json:"trans_ids,omitempty"`
	// 流转类型
	CircType CircType `protobuf:"varint,3,opt,name=circ_type,json=circType,proto3,enum=circ.v1.CircType" json:"circ_type,omitempty"`
	// 流转参与者
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	// from, 当流转类型为"Produce"时为空
	From *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// to, 当流转类型为Transfer时不为空
	To *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	// 表单json数据
	FormInfo *wrapperspb.BytesValue `protobuf:"bytes,7,opt,name=form_info,json=formInfo,proto3" json:"form_info,omitempty"`
}

func (x *BatchCircRequest) Reset() {
	*x = BatchCircRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCircRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCircRequest) ProtoMessage() {}

func (x *BatchCircRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCircRequest.ProtoReflect.Descriptor instead.
func (*BatchCircRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{2}
}

func (x *BatchCircRequest) GetTransIds() []string {
	if x != nil {
		return x.TransIds
	}
	return nil
}

func (x *BatchCircRequest) GetCircType() CircType {
	if x != nil {
		return x.CircType
	}
	return CircType_produce
}

func (x *BatchCircRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *BatchCircRequest) GetFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BatchCircRequest) GetTo() *wrapperspb.StringValue {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BatchCircRequest) GetFormInfo() *wrapperspb.BytesValue {
	if x != nil {
		return x.FormInfo
	}
	return nil
}

type BatchCircResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircIds []int32 `protobuf:"varint,1,rep,packed,name=circ_ids,json=circIds,proto3" json:"circ_ids,omitempty"`
}

func (x *BatchCircResponse) Reset() {
	*x = BatchCircResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCircResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCircResponse) ProtoMessage() {}

func (x *BatchCircResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCircResponse.ProtoReflect.Descriptor instead.
func (*BatchCircResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCircResponse) GetCircIds() []int32 {
	if x != nil {
		return x.CircIds
	}
	return nil
}

type GetCircRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流转历史记录编号
	CircId int64 `protobuf:"varint,1,opt,name=circ_id,json=circId,proto3" json:"circ_id,omitempty"`
}

func (x *GetCircRequest) Reset() {
	*x = GetCircRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCircRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircRequest) ProtoMessage() {}

func (x *GetCircRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircRequest.ProtoReflect.Descriptor instead.
func (*GetCircRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{4}
}

func (x *GetCircRequest) GetCircId() int64 {
	if x != nil {
		return x.CircId
	}
	return 0
}

type GetCircByTransIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// transId
	TransId string `protobuf:"bytes,1,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
}

func (x *GetCircByTransIdRequest) Reset() {
	*x = GetCircByTransIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCircByTransIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircByTransIdRequest) ProtoMessage() {}

func (x *GetCircByTransIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircByTransIdRequest.ProtoReflect.Descriptor instead.
func (*GetCircByTransIdRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{5}
}

func (x *GetCircByTransIdRequest) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

type GetCircByGoodsIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商品id
	GoodsId int64 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (x *GetCircByGoodsIdRequest) Reset() {
	*x = GetCircByGoodsIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCircByGoodsIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircByGoodsIdRequest) ProtoMessage() {}

func (x *GetCircByGoodsIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircByGoodsIdRequest.ProtoReflect.Descriptor instead.
func (*GetCircByGoodsIdRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{6}
}

func (x *GetCircByGoodsIdRequest) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type GetCircByGoodsIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 流转历史记录列表
	Records []*CircRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetCircByGoodsIdResponse) Reset() {
	*x = GetCircByGoodsIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCircByGoodsIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircByGoodsIdResponse) ProtoMessage() {}

func (x *GetCircByGoodsIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircByGoodsIdResponse.ProtoReflect.Descriptor instead.
func (*GetCircByGoodsIdResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{7}
}

func (x *GetCircByGoodsIdResponse) GetRecords() []*CircRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type TransIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商品id
	GoodsId int32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (x *TransIdRequest) Reset() {
	*x = TransIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransIdRequest) ProtoMessage() {}

func (x *TransIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransIdRequest.ProtoReflect.Descriptor instead.
func (*TransIdRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{8}
}

func (x *TransIdRequest) GetGoodsId() int32 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

type TransIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransId string `protobuf:"bytes,1,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
}

func (x *TransIdResponse) Reset() {
	*x = TransIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransIdResponse) ProtoMessage() {}

func (x *TransIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransIdResponse.ProtoReflect.Descriptor instead.
func (*TransIdResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{9}
}

func (x *TransIdResponse) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

type UpdateCircStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransId string       `protobuf:"bytes,1,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	Status  RecordStatus `protobuf:"varint,2,opt,name=status,proto3,enum=circ.v1.RecordStatus" json:"status,omitempty"`
}

func (x *UpdateCircStatusRequest) Reset() {
	*x = UpdateCircStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCircStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCircStatusRequest) ProtoMessage() {}

func (x *UpdateCircStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCircStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateCircStatusRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateCircStatusRequest) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

func (x *UpdateCircStatusRequest) GetStatus() RecordStatus {
	if x != nil {
		return x.Status
	}
	return RecordStatus_pending
}

type UpdateCircStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCircStatusResponse) Reset() {
	*x = UpdateCircStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCircStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCircStatusResponse) ProtoMessage() {}

func (x *UpdateCircStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCircStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateCircStatusResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{11}
}

type BatchTransIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodsIds []int32 `protobuf:"varint,1,rep,packed,name=goods_ids,json=goodsIds,proto3" json:"goods_ids,omitempty"`
}

func (x *BatchTransIdRequest) Reset() {
	*x = BatchTransIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTransIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTransIdRequest) ProtoMessage() {}

func (x *BatchTransIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTransIdRequest.ProtoReflect.Descriptor instead.
func (*BatchTransIdRequest) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{12}
}

func (x *BatchTransIdRequest) GetGoodsIds() []int32 {
	if x != nil {
		return x.GoodsIds
	}
	return nil
}

type BatchTransIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransIds map[int32]string `protobuf:"bytes,1,rep,name=transIds,proto3" json:"transIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchTransIdResponse) Reset() {
	*x = BatchTransIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_circ_v1_circ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchTransIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTransIdResponse) ProtoMessage() {}

func (x *BatchTransIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circ_v1_circ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTransIdResponse.ProtoReflect.Descriptor instead.
func (*BatchTransIdResponse) Descriptor() ([]byte, []int) {
	return file_circ_v1_circ_proto_rawDescGZIP(), []int{13}
}

func (x *BatchTransIdResponse) GetTransIds() map[int32]string {
	if x != nil {
		return x.TransIds
	}
	return nil
}

var File_circ_v1_circ_proto protoreflect.FileDescriptor

var file_circ_v1_circ_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x69,
	0x72, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x38, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x63, 0x69, 0x72, 0x63, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e,
	0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x49, 0x64, 0x73, 0x22, 0x29,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x22,
	0x34, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63,
	0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0x2b, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x13,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xe9, 0x04, 0x0a, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x12, 0x1a, 0x2e,
	0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69,
	0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x69, 0x72, 0x63, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x12, 0x17, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x20, 0x2e,
	0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x42,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72,
	0x63, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x42, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x42, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x64, 0x12, 0x1c, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69,
	0x63, 0x70, 0x2f, 0x76, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x69, 0x72, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_circ_v1_circ_proto_rawDescOnce sync.Once
	file_circ_v1_circ_proto_rawDescData = file_circ_v1_circ_proto_rawDesc
)

func file_circ_v1_circ_proto_rawDescGZIP() []byte {
	file_circ_v1_circ_proto_rawDescOnce.Do(func() {
		file_circ_v1_circ_proto_rawDescData = protoimpl.X.CompressGZIP(file_circ_v1_circ_proto_rawDescData)
	})
	return file_circ_v1_circ_proto_rawDescData
}

var file_circ_v1_circ_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_circ_v1_circ_proto_goTypes = []interface{}{
	(*CreateCircRequest)(nil),        // 0: circ.v1.CreateCircRequest
	(*CreateCircResponse)(nil),       // 1: circ.v1.CreateCircResponse
	(*BatchCircRequest)(nil),         // 2: circ.v1.BatchCircRequest
	(*BatchCircResponse)(nil),        // 3: circ.v1.BatchCircResponse
	(*GetCircRequest)(nil),           // 4: circ.v1.GetCircRequest
	(*GetCircByTransIdRequest)(nil),  // 5: circ.v1.GetCircByTransIdRequest
	(*GetCircByGoodsIdRequest)(nil),  // 6: circ.v1.GetCircByGoodsIdRequest
	(*GetCircByGoodsIdResponse)(nil), // 7: circ.v1.GetCircByGoodsIdResponse
	(*TransIdRequest)(nil),           // 8: circ.v1.TransIdRequest
	(*TransIdResponse)(nil),          // 9: circ.v1.TransIdResponse
	(*UpdateCircStatusRequest)(nil),  // 10: circ.v1.UpdateCircStatusRequest
	(*UpdateCircStatusResponse)(nil), // 11: circ.v1.UpdateCircStatusResponse
	(*BatchTransIdRequest)(nil),      // 12: circ.v1.BatchTransIdRequest
	(*BatchTransIdResponse)(nil),     // 13: circ.v1.BatchTransIdResponse
	nil,                              // 14: circ.v1.BatchTransIdResponse.TransIdsEntry
	(CircType)(0),                    // 15: circ.v1.CircType
	(*wrapperspb.StringValue)(nil),   // 16: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),    // 17: google.protobuf.BytesValue
	(*wrapperspb.Int64Value)(nil),    // 18: google.protobuf.Int64Value
	(*CircRecord)(nil),               // 19: circ.v1.CircRecord
	(RecordStatus)(0),                // 20: circ.v1.RecordStatus
}
var file_circ_v1_circ_proto_depIdxs = []int32{
	15, // 0: circ.v1.CreateCircRequest.circ_type:type_name -> circ.v1.CircType
	16, // 1: circ.v1.CreateCircRequest.from:type_name -> google.protobuf.StringValue
	17, // 2: circ.v1.CreateCircRequest.form_info:type_name -> google.protobuf.BytesValue
	18, // 3: circ.v1.CreateCircResponse.circ_id:type_name -> google.protobuf.Int64Value
	15, // 4: circ.v1.BatchCircRequest.circ_type:type_name -> circ.v1.CircType
	16, // 5: circ.v1.BatchCircRequest.from:type_name -> google.protobuf.StringValue
	16, // 6: circ.v1.BatchCircRequest.to:type_name -> google.protobuf.StringValue
	17, // 7: circ.v1.BatchCircRequest.form_info:type_name -> google.protobuf.BytesValue
	19, // 8: circ.v1.GetCircByGoodsIdResponse.records:type_name -> circ.v1.CircRecord
	20, // 9: circ.v1.UpdateCircStatusRequest.status:type_name -> circ.v1.RecordStatus
	14, // 10: circ.v1.BatchTransIdResponse.transIds:type_name -> circ.v1.BatchTransIdResponse.TransIdsEntry
	0,  // 11: circ.v1.CircService.CreateCirc:input_type -> circ.v1.CreateCircRequest
	2,  // 12: circ.v1.CircService.BatchCirc:input_type -> circ.v1.BatchCircRequest
	4,  // 13: circ.v1.CircService.GetCirc:input_type -> circ.v1.GetCircRequest
	5,  // 14: circ.v1.CircService.GetCircByTransId:input_type -> circ.v1.GetCircByTransIdRequest
	6,  // 15: circ.v1.CircService.GetCircByGoodsId:input_type -> circ.v1.GetCircByGoodsIdRequest
	8,  // 16: circ.v1.CircService.TransId:input_type -> circ.v1.TransIdRequest
	12, // 17: circ.v1.CircService.BatchTransId:input_type -> circ.v1.BatchTransIdRequest
	10, // 18: circ.v1.CircService.UpdateCircStatus:input_type -> circ.v1.UpdateCircStatusRequest
	1,  // 19: circ.v1.CircService.CreateCirc:output_type -> circ.v1.CreateCircResponse
	3,  // 20: circ.v1.CircService.BatchCirc:output_type -> circ.v1.BatchCircResponse
	19, // 21: circ.v1.CircService.GetCirc:output_type -> circ.v1.CircRecord
	19, // 22: circ.v1.CircService.GetCircByTransId:output_type -> circ.v1.CircRecord
	7,  // 23: circ.v1.CircService.GetCircByGoodsId:output_type -> circ.v1.GetCircByGoodsIdResponse
	9,  // 24: circ.v1.CircService.TransId:output_type -> circ.v1.TransIdResponse
	13, // 25: circ.v1.CircService.BatchTransId:output_type -> circ.v1.BatchTransIdResponse
	11, // 26: circ.v1.CircService.UpdateCircStatus:output_type -> circ.v1.UpdateCircStatusResponse
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_circ_v1_circ_proto_init() }
func file_circ_v1_circ_proto_init() {
	if File_circ_v1_circ_proto != nil {
		return
	}
	file_circ_v1_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_circ_v1_circ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCircRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCircResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCircRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCircByTransIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCircByGoodsIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCircByGoodsIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCircStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCircStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTransIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_circ_v1_circ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchTransIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circ_v1_circ_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_circ_v1_circ_proto_goTypes,
		DependencyIndexes: file_circ_v1_circ_proto_depIdxs,
		MessageInfos:      file_circ_v1_circ_proto_msgTypes,
	}.Build()
	File_circ_v1_circ_proto = out.File
	file_circ_v1_circ_proto_rawDesc = nil
	file_circ_v1_circ_proto_goTypes = nil
	file_circ_v1_circ_proto_depIdxs = nil
}
