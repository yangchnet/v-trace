// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: trans/v1/trans.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransServiceClient is the client API for TransService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransServiceClient interface {
	Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	Symbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*SymbolResponse, error)
	Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error)
	Burn(ctx context.Context, in *BurnRequest, opts ...grpc.CallOption) (*BurnResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	SetApproveForAll(ctx context.Context, in *SetApproveForAllRequest, opts ...grpc.CallOption) (*SetApproveForAllResponse, error)
	GrantRole(ctx context.Context, in *GrantRoleRequest, opts ...grpc.CallOption) (*GrantRoleResponse, error)
	GetTrans(ctx context.Context, in *GetTransRequest, opts ...grpc.CallOption) (*GetTransResponse, error)
	UpdateTrans(ctx context.Context, in *UpdateTransRequest, opts ...grpc.CallOption) (*UpdateTransResponse, error)
	AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*AddProcessResponse, error)
	ListTransByObj(ctx context.Context, in *ListTransByObjRequest, opts ...grpc.CallOption) (*ListTransByObjResponse, error)
	BatchMint(ctx context.Context, in *BatchMintRequest, opts ...grpc.CallOption) (*BatchMintResponse, error)
	BatchBurn(ctx context.Context, in *BatchBurnRequest, opts ...grpc.CallOption) (*BatchBurnResponse, error)
	BatchProcess(ctx context.Context, in *BatchProcessRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error)
	BatchTransform(ctx context.Context, in *BatchTransformRequest, opts ...grpc.CallOption) (*BatchTransformResponse, error)
}

type transServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransServiceClient(cc grpc.ClientConnInterface) TransServiceClient {
	return &transServiceClient{cc}
}

func (c *transServiceClient) Name(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) Symbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*SymbolResponse, error) {
	out := new(SymbolResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Symbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) Mint(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintResponse, error) {
	out := new(MintResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) Burn(ctx context.Context, in *BurnRequest, opts ...grpc.CallOption) (*BurnResponse, error) {
	out := new(BurnResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) SetApproveForAll(ctx context.Context, in *SetApproveForAllRequest, opts ...grpc.CallOption) (*SetApproveForAllResponse, error) {
	out := new(SetApproveForAllResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/SetApproveForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) GrantRole(ctx context.Context, in *GrantRoleRequest, opts ...grpc.CallOption) (*GrantRoleResponse, error) {
	out := new(GrantRoleResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/GrantRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) GetTrans(ctx context.Context, in *GetTransRequest, opts ...grpc.CallOption) (*GetTransResponse, error) {
	out := new(GetTransResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/GetTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) UpdateTrans(ctx context.Context, in *UpdateTransRequest, opts ...grpc.CallOption) (*UpdateTransResponse, error) {
	out := new(UpdateTransResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/UpdateTrans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc.CallOption) (*AddProcessResponse, error) {
	out := new(AddProcessResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/AddProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) ListTransByObj(ctx context.Context, in *ListTransByObjRequest, opts ...grpc.CallOption) (*ListTransByObjResponse, error) {
	out := new(ListTransByObjResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/ListTransByObj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) BatchMint(ctx context.Context, in *BatchMintRequest, opts ...grpc.CallOption) (*BatchMintResponse, error) {
	out := new(BatchMintResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/BatchMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) BatchBurn(ctx context.Context, in *BatchBurnRequest, opts ...grpc.CallOption) (*BatchBurnResponse, error) {
	out := new(BatchBurnResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/BatchBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) BatchProcess(ctx context.Context, in *BatchProcessRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error) {
	out := new(BatchProcessResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/BatchProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transServiceClient) BatchTransform(ctx context.Context, in *BatchTransformRequest, opts ...grpc.CallOption) (*BatchTransformResponse, error) {
	out := new(BatchTransformResponse)
	err := c.cc.Invoke(ctx, "/trans.v1.TransService/BatchTransform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransServiceServer is the server API for TransService service.
// All implementations must embed UnimplementedTransServiceServer
// for forward compatibility
type TransServiceServer interface {
	Name(context.Context, *NameRequest) (*NameResponse, error)
	Symbol(context.Context, *SymbolRequest) (*SymbolResponse, error)
	Mint(context.Context, *MintRequest) (*MintResponse, error)
	Burn(context.Context, *BurnRequest) (*BurnResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	SetApproveForAll(context.Context, *SetApproveForAllRequest) (*SetApproveForAllResponse, error)
	GrantRole(context.Context, *GrantRoleRequest) (*GrantRoleResponse, error)
	GetTrans(context.Context, *GetTransRequest) (*GetTransResponse, error)
	UpdateTrans(context.Context, *UpdateTransRequest) (*UpdateTransResponse, error)
	AddProcess(context.Context, *AddProcessRequest) (*AddProcessResponse, error)
	ListTransByObj(context.Context, *ListTransByObjRequest) (*ListTransByObjResponse, error)
	BatchMint(context.Context, *BatchMintRequest) (*BatchMintResponse, error)
	BatchBurn(context.Context, *BatchBurnRequest) (*BatchBurnResponse, error)
	BatchProcess(context.Context, *BatchProcessRequest) (*BatchProcessResponse, error)
	BatchTransform(context.Context, *BatchTransformRequest) (*BatchTransformResponse, error)
	mustEmbedUnimplementedTransServiceServer()
}

// UnimplementedTransServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransServiceServer struct {
}

func (UnimplementedTransServiceServer) Name(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedTransServiceServer) Symbol(context.Context, *SymbolRequest) (*SymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Symbol not implemented")
}
func (UnimplementedTransServiceServer) Mint(context.Context, *MintRequest) (*MintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (UnimplementedTransServiceServer) Burn(context.Context, *BurnRequest) (*BurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}
func (UnimplementedTransServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedTransServiceServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedTransServiceServer) SetApproveForAll(context.Context, *SetApproveForAllRequest) (*SetApproveForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproveForAll not implemented")
}
func (UnimplementedTransServiceServer) GrantRole(context.Context, *GrantRoleRequest) (*GrantRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantRole not implemented")
}
func (UnimplementedTransServiceServer) GetTrans(context.Context, *GetTransRequest) (*GetTransResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrans not implemented")
}
func (UnimplementedTransServiceServer) UpdateTrans(context.Context, *UpdateTransRequest) (*UpdateTransResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrans not implemented")
}
func (UnimplementedTransServiceServer) AddProcess(context.Context, *AddProcessRequest) (*AddProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcess not implemented")
}
func (UnimplementedTransServiceServer) ListTransByObj(context.Context, *ListTransByObjRequest) (*ListTransByObjResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransByObj not implemented")
}
func (UnimplementedTransServiceServer) BatchMint(context.Context, *BatchMintRequest) (*BatchMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchMint not implemented")
}
func (UnimplementedTransServiceServer) BatchBurn(context.Context, *BatchBurnRequest) (*BatchBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchBurn not implemented")
}
func (UnimplementedTransServiceServer) BatchProcess(context.Context, *BatchProcessRequest) (*BatchProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcess not implemented")
}
func (UnimplementedTransServiceServer) BatchTransform(context.Context, *BatchTransformRequest) (*BatchTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTransform not implemented")
}
func (UnimplementedTransServiceServer) mustEmbedUnimplementedTransServiceServer() {}

// UnsafeTransServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransServiceServer will
// result in compilation errors.
type UnsafeTransServiceServer interface {
	mustEmbedUnimplementedTransServiceServer()
}

func RegisterTransServiceServer(s grpc.ServiceRegistrar, srv TransServiceServer) {
	s.RegisterService(&TransService_ServiceDesc, srv)
}

func _TransService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Name(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_Symbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Symbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Symbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Symbol(ctx, req.(*SymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Mint(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Burn(ctx, req.(*BurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_SetApproveForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApproveForAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).SetApproveForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/SetApproveForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).SetApproveForAll(ctx, req.(*SetApproveForAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_GrantRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).GrantRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/GrantRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).GrantRole(ctx, req.(*GrantRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_GetTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).GetTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/GetTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).GetTrans(ctx, req.(*GetTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_UpdateTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).UpdateTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/UpdateTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).UpdateTrans(ctx, req.(*UpdateTransRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_AddProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).AddProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/AddProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).AddProcess(ctx, req.(*AddProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_ListTransByObj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransByObjRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).ListTransByObj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/ListTransByObj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).ListTransByObj(ctx, req.(*ListTransByObjRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_BatchMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).BatchMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/BatchMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).BatchMint(ctx, req.(*BatchMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_BatchBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).BatchBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/BatchBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).BatchBurn(ctx, req.(*BatchBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_BatchProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).BatchProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/BatchProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).BatchProcess(ctx, req.(*BatchProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransService_BatchTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransServiceServer).BatchTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trans.v1.TransService/BatchTransform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransServiceServer).BatchTransform(ctx, req.(*BatchTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransService_ServiceDesc is the grpc.ServiceDesc for TransService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trans.v1.TransService",
	HandlerType: (*TransServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Name",
			Handler:    _TransService_Name_Handler,
		},
		{
			MethodName: "Symbol",
			Handler:    _TransService_Symbol_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _TransService_Mint_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _TransService_Burn_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _TransService_Transfer_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _TransService_Approve_Handler,
		},
		{
			MethodName: "SetApproveForAll",
			Handler:    _TransService_SetApproveForAll_Handler,
		},
		{
			MethodName: "GrantRole",
			Handler:    _TransService_GrantRole_Handler,
		},
		{
			MethodName: "GetTrans",
			Handler:    _TransService_GetTrans_Handler,
		},
		{
			MethodName: "UpdateTrans",
			Handler:    _TransService_UpdateTrans_Handler,
		},
		{
			MethodName: "AddProcess",
			Handler:    _TransService_AddProcess_Handler,
		},
		{
			MethodName: "ListTransByObj",
			Handler:    _TransService_ListTransByObj_Handler,
		},
		{
			MethodName: "BatchMint",
			Handler:    _TransService_BatchMint_Handler,
		},
		{
			MethodName: "BatchBurn",
			Handler:    _TransService_BatchBurn_Handler,
		},
		{
			MethodName: "BatchProcess",
			Handler:    _TransService_BatchProcess_Handler,
		},
		{
			MethodName: "BatchTransform",
			Handler:    _TransService_BatchTransform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trans/v1/trans.proto",
}
