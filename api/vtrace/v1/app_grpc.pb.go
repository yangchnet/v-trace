// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: vtrace/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VTraceInterfaceClient is the client API for VTraceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VTraceInterfaceClient interface {
	// Register
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Token
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// RefreshToken 更新令牌
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// Profile 获取用户信息
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// DeleteUser 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// IdentityAuth 实名认证
	IdentityAuth(ctx context.Context, in *IdentityAuthRequest, opts ...grpc.CallOption) (*IdentityAuthResponse, error)
	// 企业认证
	OrgAuth(ctx context.Context, in *OrgAuthRequest, opts ...grpc.CallOption) (*OrgAuthResponse, error)
	// 企业增加成员
	Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	// 创建商品种类
	CreateGoodsClass(ctx context.Context, in *CreateGoodsClassRequest, opts ...grpc.CallOption) (*CreateGoodsClassResponse, error)
	// 创建商品批次
	CreateGoodsSerial(ctx context.Context, in *CreateGoodsSerialRequest, opts ...grpc.CallOption) (*CreateGoodsSerialResponse, error)
	// 批量创建商品
	BatchCreateGoods(ctx context.Context, in *BatchCreateGoodsRequest, opts ...grpc.CallOption) (*BatchCreateGoodsResponse, error)
	// ListClass 列出产品类型
	ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error)
	// ListGoodsSerial 列出产品批次
	ListGoodsSerial(ctx context.Context, in *ListGoodsSerialRequest, opts ...grpc.CallOption) (*ListGoodsSerialResponse, error)
	// ListGoods 列出商品
	ListGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsResponse, error)
	// 更新商品种类
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error)
	// 更新产品批次
	UpdateGoodsSerial(ctx context.Context, in *UpdateGoodsSerialRequest, opts ...grpc.CallOption) (*UpdateGoodsSerialResponse, error)
	// 更新商品
	UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsResponse, error)
	// 获取原材料列表
	ListMaterial(ctx context.Context, in *ListMaterialRequest, opts ...grpc.CallOption) (*ListMaterialResponse, error)
	// 商品流转
	CreateCirc(ctx context.Context, in *CreateCircRequest, opts ...grpc.CallOption) (*CreateCircResponse, error)
	// 产品批量流传
	BatchCirc(ctx context.Context, in *BatchCircRequest, opts ...grpc.CallOption) (*BatchCircResponse, error)
	// 获取商品流转历史
	GetCirc(ctx context.Context, in *GetCircRequest, opts ...grpc.CallOption) (*GetCircResponse, error)
	// ListModels 列出所有的算法模型
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Predict 使用算法模型进行预测
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
	// Upload 上传文件
	Upload(ctx context.Context, opts ...grpc.CallOption) (VTraceInterface_UploadClient, error)
	// OrgRemoveMember 企业删除成员
	OrgRemoveMember(ctx context.Context, in *OrgRemoveMemberRequest, opts ...grpc.CallOption) (*OrgRemoveMemberResponse, error)
	// ListOrgMember 企业查询成员列表
	ListOrgMember(ctx context.Context, in *ListOrgMemberRequest, opts ...grpc.CallOption) (*ListOrgMemberResponse, error)
	// UpdateOrg 企业信息更新
	UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error)
	// UpdateUser 用户信息更新
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// GetOrgUser 查询用户所属企业
	GetOrgUser(ctx context.Context, in *GetOrgOfUserRequest, opts ...grpc.CallOption) (*GetOrgOfUserResponse, error)
}

type vTraceInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewVTraceInterfaceClient(cc grpc.ClientConnInterface) VTraceInterfaceClient {
	return &vTraceInterfaceClient{cc}
}

func (c *vTraceInterfaceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) IdentityAuth(ctx context.Context, in *IdentityAuthRequest, opts ...grpc.CallOption) (*IdentityAuthResponse, error) {
	out := new(IdentityAuthResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/IdentityAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) OrgAuth(ctx context.Context, in *OrgAuthRequest, opts ...grpc.CallOption) (*OrgAuthResponse, error) {
	out := new(OrgAuthResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/OrgAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) CreateGoodsClass(ctx context.Context, in *CreateGoodsClassRequest, opts ...grpc.CallOption) (*CreateGoodsClassResponse, error) {
	out := new(CreateGoodsClassResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/CreateGoodsClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) CreateGoodsSerial(ctx context.Context, in *CreateGoodsSerialRequest, opts ...grpc.CallOption) (*CreateGoodsSerialResponse, error) {
	out := new(CreateGoodsSerialResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/CreateGoodsSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) BatchCreateGoods(ctx context.Context, in *BatchCreateGoodsRequest, opts ...grpc.CallOption) (*BatchCreateGoodsResponse, error) {
	out := new(BatchCreateGoodsResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/BatchCreateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error) {
	out := new(ListClassResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListGoodsSerial(ctx context.Context, in *ListGoodsSerialRequest, opts ...grpc.CallOption) (*ListGoodsSerialResponse, error) {
	out := new(ListGoodsSerialResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListGoodsSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListGoods(ctx context.Context, in *ListGoodsRequest, opts ...grpc.CallOption) (*ListGoodsResponse, error) {
	out := new(ListGoodsResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error) {
	out := new(UpdateClassResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/UpdateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) UpdateGoodsSerial(ctx context.Context, in *UpdateGoodsSerialRequest, opts ...grpc.CallOption) (*UpdateGoodsSerialResponse, error) {
	out := new(UpdateGoodsSerialResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/UpdateGoodsSerial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) UpdateGoods(ctx context.Context, in *UpdateGoodsRequest, opts ...grpc.CallOption) (*UpdateGoodsResponse, error) {
	out := new(UpdateGoodsResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/UpdateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListMaterial(ctx context.Context, in *ListMaterialRequest, opts ...grpc.CallOption) (*ListMaterialResponse, error) {
	out := new(ListMaterialResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) CreateCirc(ctx context.Context, in *CreateCircRequest, opts ...grpc.CallOption) (*CreateCircResponse, error) {
	out := new(CreateCircResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/CreateCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) BatchCirc(ctx context.Context, in *BatchCircRequest, opts ...grpc.CallOption) (*BatchCircResponse, error) {
	out := new(BatchCircResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/BatchCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) GetCirc(ctx context.Context, in *GetCircRequest, opts ...grpc.CallOption) (*GetCircResponse, error) {
	out := new(GetCircResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/GetCirc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (VTraceInterface_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &VTraceInterface_ServiceDesc.Streams[0], "/vtrace.v1.VTraceInterface/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &vTraceInterfaceUploadClient{stream}
	return x, nil
}

type VTraceInterface_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type vTraceInterfaceUploadClient struct {
	grpc.ClientStream
}

func (x *vTraceInterfaceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vTraceInterfaceUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vTraceInterfaceClient) OrgRemoveMember(ctx context.Context, in *OrgRemoveMemberRequest, opts ...grpc.CallOption) (*OrgRemoveMemberResponse, error) {
	out := new(OrgRemoveMemberResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/OrgRemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) ListOrgMember(ctx context.Context, in *ListOrgMemberRequest, opts ...grpc.CallOption) (*ListOrgMemberResponse, error) {
	out := new(ListOrgMemberResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/ListOrgMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...grpc.CallOption) (*UpdateOrgResponse, error) {
	out := new(UpdateOrgResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vTraceInterfaceClient) GetOrgUser(ctx context.Context, in *GetOrgOfUserRequest, opts ...grpc.CallOption) (*GetOrgOfUserResponse, error) {
	out := new(GetOrgOfUserResponse)
	err := c.cc.Invoke(ctx, "/vtrace.v1.VTraceInterface/GetOrgUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VTraceInterfaceServer is the server API for VTraceInterface service.
// All implementations must embed UnimplementedVTraceInterfaceServer
// for forward compatibility
type VTraceInterfaceServer interface {
	// Register
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Token
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	// RefreshToken 更新令牌
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// Profile 获取用户信息
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	// DeleteUser 删除用户
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// IdentityAuth 实名认证
	IdentityAuth(context.Context, *IdentityAuthRequest) (*IdentityAuthResponse, error)
	// 企业认证
	OrgAuth(context.Context, *OrgAuthRequest) (*OrgAuthResponse, error)
	// 企业增加成员
	Member(context.Context, *MemberRequest) (*MemberResponse, error)
	// 创建商品种类
	CreateGoodsClass(context.Context, *CreateGoodsClassRequest) (*CreateGoodsClassResponse, error)
	// 创建商品批次
	CreateGoodsSerial(context.Context, *CreateGoodsSerialRequest) (*CreateGoodsSerialResponse, error)
	// 批量创建商品
	BatchCreateGoods(context.Context, *BatchCreateGoodsRequest) (*BatchCreateGoodsResponse, error)
	// ListClass 列出产品类型
	ListClass(context.Context, *ListClassRequest) (*ListClassResponse, error)
	// ListGoodsSerial 列出产品批次
	ListGoodsSerial(context.Context, *ListGoodsSerialRequest) (*ListGoodsSerialResponse, error)
	// ListGoods 列出商品
	ListGoods(context.Context, *ListGoodsRequest) (*ListGoodsResponse, error)
	// 更新商品种类
	UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error)
	// 更新产品批次
	UpdateGoodsSerial(context.Context, *UpdateGoodsSerialRequest) (*UpdateGoodsSerialResponse, error)
	// 更新商品
	UpdateGoods(context.Context, *UpdateGoodsRequest) (*UpdateGoodsResponse, error)
	// 获取原材料列表
	ListMaterial(context.Context, *ListMaterialRequest) (*ListMaterialResponse, error)
	// 商品流转
	CreateCirc(context.Context, *CreateCircRequest) (*CreateCircResponse, error)
	// 产品批量流传
	BatchCirc(context.Context, *BatchCircRequest) (*BatchCircResponse, error)
	// 获取商品流转历史
	GetCirc(context.Context, *GetCircRequest) (*GetCircResponse, error)
	// ListModels 列出所有的算法模型
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Predict 使用算法模型进行预测
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	// Upload 上传文件
	Upload(VTraceInterface_UploadServer) error
	// OrgRemoveMember 企业删除成员
	OrgRemoveMember(context.Context, *OrgRemoveMemberRequest) (*OrgRemoveMemberResponse, error)
	// ListOrgMember 企业查询成员列表
	ListOrgMember(context.Context, *ListOrgMemberRequest) (*ListOrgMemberResponse, error)
	// UpdateOrg 企业信息更新
	UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error)
	// UpdateUser 用户信息更新
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// GetOrgUser 查询用户所属企业
	GetOrgUser(context.Context, *GetOrgOfUserRequest) (*GetOrgOfUserResponse, error)
	mustEmbedUnimplementedVTraceInterfaceServer()
}

// UnimplementedVTraceInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedVTraceInterfaceServer struct {
}

func (UnimplementedVTraceInterfaceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVTraceInterfaceServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedVTraceInterfaceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedVTraceInterfaceServer) Profile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedVTraceInterfaceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedVTraceInterfaceServer) IdentityAuth(context.Context, *IdentityAuthRequest) (*IdentityAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityAuth not implemented")
}
func (UnimplementedVTraceInterfaceServer) OrgAuth(context.Context, *OrgAuthRequest) (*OrgAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgAuth not implemented")
}
func (UnimplementedVTraceInterfaceServer) Member(context.Context, *MemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedVTraceInterfaceServer) CreateGoodsClass(context.Context, *CreateGoodsClassRequest) (*CreateGoodsClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodsClass not implemented")
}
func (UnimplementedVTraceInterfaceServer) CreateGoodsSerial(context.Context, *CreateGoodsSerialRequest) (*CreateGoodsSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodsSerial not implemented")
}
func (UnimplementedVTraceInterfaceServer) BatchCreateGoods(context.Context, *BatchCreateGoodsRequest) (*BatchCreateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateGoods not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListClass(context.Context, *ListClassRequest) (*ListClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClass not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListGoodsSerial(context.Context, *ListGoodsSerialRequest) (*ListGoodsSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoodsSerial not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListGoods(context.Context, *ListGoodsRequest) (*ListGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGoods not implemented")
}
func (UnimplementedVTraceInterfaceServer) UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedVTraceInterfaceServer) UpdateGoodsSerial(context.Context, *UpdateGoodsSerialRequest) (*UpdateGoodsSerialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsSerial not implemented")
}
func (UnimplementedVTraceInterfaceServer) UpdateGoods(context.Context, *UpdateGoodsRequest) (*UpdateGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoods not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListMaterial(context.Context, *ListMaterialRequest) (*ListMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterial not implemented")
}
func (UnimplementedVTraceInterfaceServer) CreateCirc(context.Context, *CreateCircRequest) (*CreateCircResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCirc not implemented")
}
func (UnimplementedVTraceInterfaceServer) BatchCirc(context.Context, *BatchCircRequest) (*BatchCircResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCirc not implemented")
}
func (UnimplementedVTraceInterfaceServer) GetCirc(context.Context, *GetCircRequest) (*GetCircResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCirc not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedVTraceInterfaceServer) Predict(context.Context, *PredictRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedVTraceInterfaceServer) Upload(VTraceInterface_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedVTraceInterfaceServer) OrgRemoveMember(context.Context, *OrgRemoveMemberRequest) (*OrgRemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgRemoveMember not implemented")
}
func (UnimplementedVTraceInterfaceServer) ListOrgMember(context.Context, *ListOrgMemberRequest) (*ListOrgMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgMember not implemented")
}
func (UnimplementedVTraceInterfaceServer) UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedVTraceInterfaceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedVTraceInterfaceServer) GetOrgUser(context.Context, *GetOrgOfUserRequest) (*GetOrgOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgUser not implemented")
}
func (UnimplementedVTraceInterfaceServer) mustEmbedUnimplementedVTraceInterfaceServer() {}

// UnsafeVTraceInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VTraceInterfaceServer will
// result in compilation errors.
type UnsafeVTraceInterfaceServer interface {
	mustEmbedUnimplementedVTraceInterfaceServer()
}

func RegisterVTraceInterfaceServer(s grpc.ServiceRegistrar, srv VTraceInterfaceServer) {
	s.RegisterService(&VTraceInterface_ServiceDesc, srv)
}

func _VTraceInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_IdentityAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).IdentityAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/IdentityAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).IdentityAuth(ctx, req.(*IdentityAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_OrgAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).OrgAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/OrgAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).OrgAuth(ctx, req.(*OrgAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).Member(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_CreateGoodsClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).CreateGoodsClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/CreateGoodsClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).CreateGoodsClass(ctx, req.(*CreateGoodsClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_CreateGoodsSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).CreateGoodsSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/CreateGoodsSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).CreateGoodsSerial(ctx, req.(*CreateGoodsSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_BatchCreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).BatchCreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/BatchCreateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).BatchCreateGoods(ctx, req.(*BatchCreateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListClass(ctx, req.(*ListClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListGoodsSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListGoodsSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListGoodsSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListGoodsSerial(ctx, req.(*ListGoodsSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListGoods(ctx, req.(*ListGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/UpdateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_UpdateGoodsSerial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsSerialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).UpdateGoodsSerial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/UpdateGoodsSerial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).UpdateGoodsSerial(ctx, req.(*UpdateGoodsSerialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_UpdateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).UpdateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/UpdateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).UpdateGoods(ctx, req.(*UpdateGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListMaterial(ctx, req.(*ListMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_CreateCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).CreateCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/CreateCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).CreateCirc(ctx, req.(*CreateCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_BatchCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).BatchCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/BatchCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).BatchCirc(ctx, req.(*BatchCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_GetCirc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCircRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).GetCirc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/GetCirc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).GetCirc(ctx, req.(*GetCircRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VTraceInterfaceServer).Upload(&vTraceInterfaceUploadServer{stream})
}

type VTraceInterface_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type vTraceInterfaceUploadServer struct {
	grpc.ServerStream
}

func (x *vTraceInterfaceUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vTraceInterfaceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VTraceInterface_OrgRemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).OrgRemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/OrgRemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).OrgRemoveMember(ctx, req.(*OrgRemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_ListOrgMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).ListOrgMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/ListOrgMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).ListOrgMember(ctx, req.(*ListOrgMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).UpdateOrg(ctx, req.(*UpdateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VTraceInterface_GetOrgUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VTraceInterfaceServer).GetOrgUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vtrace.v1.VTraceInterface/GetOrgUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VTraceInterfaceServer).GetOrgUser(ctx, req.(*GetOrgOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VTraceInterface_ServiceDesc is the grpc.ServiceDesc for VTraceInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VTraceInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vtrace.v1.VTraceInterface",
	HandlerType: (*VTraceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _VTraceInterface_Register_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _VTraceInterface_Token_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _VTraceInterface_RefreshToken_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _VTraceInterface_Profile_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _VTraceInterface_DeleteUser_Handler,
		},
		{
			MethodName: "IdentityAuth",
			Handler:    _VTraceInterface_IdentityAuth_Handler,
		},
		{
			MethodName: "OrgAuth",
			Handler:    _VTraceInterface_OrgAuth_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _VTraceInterface_Member_Handler,
		},
		{
			MethodName: "CreateGoodsClass",
			Handler:    _VTraceInterface_CreateGoodsClass_Handler,
		},
		{
			MethodName: "CreateGoodsSerial",
			Handler:    _VTraceInterface_CreateGoodsSerial_Handler,
		},
		{
			MethodName: "BatchCreateGoods",
			Handler:    _VTraceInterface_BatchCreateGoods_Handler,
		},
		{
			MethodName: "ListClass",
			Handler:    _VTraceInterface_ListClass_Handler,
		},
		{
			MethodName: "ListGoodsSerial",
			Handler:    _VTraceInterface_ListGoodsSerial_Handler,
		},
		{
			MethodName: "ListGoods",
			Handler:    _VTraceInterface_ListGoods_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _VTraceInterface_UpdateClass_Handler,
		},
		{
			MethodName: "UpdateGoodsSerial",
			Handler:    _VTraceInterface_UpdateGoodsSerial_Handler,
		},
		{
			MethodName: "UpdateGoods",
			Handler:    _VTraceInterface_UpdateGoods_Handler,
		},
		{
			MethodName: "ListMaterial",
			Handler:    _VTraceInterface_ListMaterial_Handler,
		},
		{
			MethodName: "CreateCirc",
			Handler:    _VTraceInterface_CreateCirc_Handler,
		},
		{
			MethodName: "BatchCirc",
			Handler:    _VTraceInterface_BatchCirc_Handler,
		},
		{
			MethodName: "GetCirc",
			Handler:    _VTraceInterface_GetCirc_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _VTraceInterface_ListModels_Handler,
		},
		{
			MethodName: "Predict",
			Handler:    _VTraceInterface_Predict_Handler,
		},
		{
			MethodName: "OrgRemoveMember",
			Handler:    _VTraceInterface_OrgRemoveMember_Handler,
		},
		{
			MethodName: "ListOrgMember",
			Handler:    _VTraceInterface_ListOrgMember_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _VTraceInterface_UpdateOrg_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _VTraceInterface_UpdateUser_Handler,
		},
		{
			MethodName: "GetOrgUser",
			Handler:    _VTraceInterface_GetOrgUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _VTraceInterface_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vtrace/v1/app.proto",
}
