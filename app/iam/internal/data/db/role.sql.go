// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const deleteRelation = `-- name: DeleteRelation :exec
DELETE FROM
    ` + "`" + `user_role` + "`" + `
WHERE
    ` + "`" + `username` + "`" + ` = ?
`

// DeleteRelation 删除某用户的所有角色信息
func (q *Queries) DeleteRelation(ctx context.Context, username sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteRelation, username)
	return err
}

const getRolesByUsername = `-- name: GetRolesByUsername :many
SELECT
    ` + "`" + `rolename` + "`" + `
FROM
    ` + "`" + `user_role` + "`" + `
WHERE
    ` + "`" + `username` + "`" + ` = ?
`

// GetRoles 获取用户的角色
func (q *Queries) GetRolesByUsername(ctx context.Context, username sql.NullString) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var rolename sql.NullString
		if err := rows.Scan(&rolename); err != nil {
			return nil, err
		}
		items = append(items, rolename)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const grantRole = `-- name: GrantRole :exec
INSERT INTO
    ` + "`" + `user_role` + "`" + ` (` + "`" + `username` + "`" + `, ` + "`" + `rolename` + "`" + `, created_at)
VALUES
    (?, ?, now())
`

type GrantRoleParams struct {
	Username sql.NullString
	Rolename sql.NullString
}

// GrantRole 为用户赋予角色
func (q *Queries) GrantRole(ctx context.Context, arg *GrantRoleParams) error {
	_, err := q.db.ExecContext(ctx, grantRole, arg.Username, arg.Rolename)
	return err
}

const removeRole = `-- name: RemoveRole :exec
/*
DELETE FROM
    user_role
WHERE
        username = ? and rolename = ?;
 */

DELETE FROM
    user_role
WHERE
    username = ? and rolename = producer
`

// RemoveRole 企业移除成员角色
func (q *Queries) RemoveRole(ctx context.Context, username sql.NullString) error {
	_, err := q.db.ExecContext(ctx, removeRole, username)
	return err
}
