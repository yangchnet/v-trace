// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: org.sql

package db

import (
	"context"
	"database/sql"
)

const addMember = `-- name: AddMember :execlastid
INSERT INTO
    ` + "`" + `member` + "`" + ` (` + "`" + `username` + "`" + `, ` + "`" + `org_id` + "`" + `, ` + "`" + `created_at` + "`" + `)
VALUES
    (?, ?, now())
`

type AddMemberParams struct {
	Username sql.NullString
	OrgID    sql.NullInt32
}

// AddMember 企业增加成员
func (q *Queries) AddMember(ctx context.Context, arg *AddMemberParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, addMember, arg.Username, arg.OrgID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createOrg = `-- name: CreateOrg :execlastid
INSERT INTO
    ` + "`" + `org` + "`" + ` (` + "`" + `org_name` + "`" + `, ` + "`" + `org_code` + "`" + `, ` + "`" + `legal_person_name` + "`" + `, ` + "`" + `legal_person_phone` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `owner` + "`" + `, ` + "`" + `info` + "`" + `)
VALUES
    (?, ?, ?, ?, now(), ?, ?)
`

type CreateOrgParams struct {
	OrgName          string
	OrgCode          string
	LegalPersonName  string
	LegalPersonPhone string
	Owner            string
	Info             []byte
}

// CreateOrg 创建一个用户
func (q *Queries) CreateOrg(ctx context.Context, arg *CreateOrgParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createOrg,
		arg.OrgName,
		arg.OrgCode,
		arg.LegalPersonName,
		arg.LegalPersonPhone,
		arg.Owner,
		arg.Info,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM
    ` + "`" + `member` + "`" + `
WHERE
    ` + "`" + `username` + "`" + ` = ?
`

// DeleteMember 删除成员
func (q *Queries) DeleteMember(ctx context.Context, username sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteMember, username)
	return err
}

const deleteOrgMember = `-- name: DeleteOrgMember :exec
DELETE FROM
    member
WHERE
    org_id = ? and username = ?
`

type DeleteOrgMemberParams struct {
	OrgID    sql.NullInt32
	Username sql.NullString
}

// DeleteOrgMember 企业移除成员
func (q *Queries) DeleteOrgMember(ctx context.Context, arg *DeleteOrgMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrgMember, arg.OrgID, arg.Username)
	return err
}

const getOrgByID = `-- name: GetOrgByID :one
SELECT
    id, created_at, owner, info, org_name, org_code, legal_person_name, legal_person_phone
FROM
    ` + "`" + `org` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
`

// GetOrgByID 根据组织id获取组织信息
func (q *Queries) GetOrgByID(ctx context.Context, id int32) (*Org, error) {
	row := q.db.QueryRowContext(ctx, getOrgByID, id)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Owner,
		&i.Info,
		&i.OrgName,
		&i.OrgCode,
		&i.LegalPersonName,
		&i.LegalPersonPhone,
	)
	return &i, err
}

const getOrgOfUser = `-- name: GetOrgOfUser :one
SELECT
    org.id, org.created_at, org.owner, org.info, org.org_name, org.org_code, org.legal_person_name, org.legal_person_phone
FROM
    org join member
WHERE
    member.username = ? and member.org_id = org.id
`

// 查询用户所属企业
func (q *Queries) GetOrgOfUser(ctx context.Context, username sql.NullString) (*Org, error) {
	row := q.db.QueryRowContext(ctx, getOrgOfUser, username)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Owner,
		&i.Info,
		&i.OrgName,
		&i.OrgCode,
		&i.LegalPersonName,
		&i.LegalPersonPhone,
	)
	return &i, err
}

const listOrgMember = `-- name: ListOrgMember :many
SELECT
	` + "`" + `user` + "`" + `.` + "`" + `id` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `username` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `nickname` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `phone` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `email` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `created_at` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `realname` + "`" + `, ` + "`" + `user` + "`" + `.` + "`" + `idcard` + "`" + `
FROM
	` + "`" + `member` + "`" + ` JOIN ` + "`" + `user` + "`" + `
ON
	` + "`" + `member` + "`" + `.` + "`" + `username` + "`" + ` = ` + "`" + `user` + "`" + `.` + "`" + `username` + "`" + `
WHERE
	` + "`" + `member` + "`" + `.` + "`" + `org_id` + "`" + ` = ?
ORDER BY
	` + "`" + `user` + "`" + `.` + "`" + `id` + "`" + `
LIMIT
	?, ?
`

type ListOrgMemberParams struct {
	Orgid  sql.NullInt32
	Offset int32
	Limit  int32
}

type ListOrgMemberRow struct {
	ID        int32
	Username  string
	Nickname  sql.NullString
	Phone     string
	Email     sql.NullString
	CreatedAt sql.NullTime
	Realname  sql.NullString
	Idcard    sql.NullString
}

// ListOrgMember 企业查询成员列表
func (q *Queries) ListOrgMember(ctx context.Context, arg *ListOrgMemberParams) ([]*ListOrgMemberRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrgMember, arg.Orgid, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListOrgMemberRow
	for rows.Next() {
		var i ListOrgMemberRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Nickname,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
			&i.Realname,
			&i.Idcard,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrg = `-- name: UpdateOrg :exec
UPDATE
    org
SET org_name = ?,
    org_code = ?,
    legal_person_name = ?,
    legal_person_phone = ?,
    created_at = now(),
    owner = ?,
    info = ?
WHERE
id = ?
`

type UpdateOrgParams struct {
	OrgName          string
	OrgCode          string
	LegalPersonName  string
	LegalPersonPhone string
	Owner            string
	Info             []byte
	ID               int32
}

// UpdateOrg 企业信息更新
func (q *Queries) UpdateOrg(ctx context.Context, arg *UpdateOrgParams) error {
	_, err := q.db.ExecContext(ctx, updateOrg,
		arg.OrgName,
		arg.OrgCode,
		arg.LegalPersonName,
		arg.LegalPersonPhone,
		arg.Owner,
		arg.Info,
		arg.ID,
	)
	return err
}
