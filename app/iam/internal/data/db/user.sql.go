// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO
    ` + "`" + `user` + "`" + ` (` + "`" + `username` + "`" + `, ` + "`" + `nickname` + "`" + `, ` + "`" + `passwd` + "`" + `, ` + "`" + `phone` + "`" + `, ` + "`" + `email` + "`" + `, created_at, ` + "`" + `avatar` + "`" + `, ` + "`" + `status` + "`" + `)
VALUES
    (?, ?, ?, ?, ?, now(), ?, ?)
`

type CreateUserParams struct {
	Username string
	Nickname sql.NullString
	Passwd   string
	Phone    string
	Email    sql.NullString
	Avatar   sql.NullString
	Status   sql.NullString
}

// CreateUser 创建一个用户
func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Nickname,
		arg.Passwd,
		arg.Phone,
		arg.Email,
		arg.Avatar,
		arg.Status,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUserByID = `-- name: DeleteUserByID :exec
UPDATE
    user
SET
    status = ?
WHERE
    username = ?
`

type DeleteUserByIDParams struct {
	Status   sql.NullString
	Username string
}

// DeleteUserByUsername 根据用户id删除用户
func (q *Queries) DeleteUserByID(ctx context.Context, arg *DeleteUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, arg.Status, arg.Username)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, username, nickname, passwd, email, created_at, realname, idcard, phone, avatar, status
FROM
    ` + "`" + `user` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = ?
`

// GetUserByPhone 根据ID获取用户
func (q *Queries) GetUserByID(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Passwd,
		&i.Email,
		&i.CreatedAt,
		&i.Realname,
		&i.Idcard,
		&i.Phone,
		&i.Avatar,
		&i.Status,
	)
	return &i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT
    id, username, nickname, passwd, email, created_at, realname, idcard, phone, avatar, status
FROM
    ` + "`" + `user` + "`" + `
WHERE ` + "`" + `phone` + "`" + ` = ?
`

// GetUserByPhone 根据手机号获取用户
func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Passwd,
		&i.Email,
		&i.CreatedAt,
		&i.Realname,
		&i.Idcard,
		&i.Phone,
		&i.Avatar,
		&i.Status,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, username, nickname, passwd, email, created_at, realname, idcard, phone, avatar, status
FROM
    ` + "`" + `user` + "`" + `
WHERE ` + "`" + `username` + "`" + ` = ?
`

// GetUserByUsername 根据用户名获取用户信息
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Nickname,
		&i.Passwd,
		&i.Email,
		&i.CreatedAt,
		&i.Realname,
		&i.Idcard,
		&i.Phone,
		&i.Avatar,
		&i.Status,
	)
	return &i, err
}

const updateIdentity = `-- name: UpdateIdentity :exec
UPDATE
    ` + "`" + `user` + "`" + `
SET
    realname = ?, idcard = ?
WHERE
    username = ?
`

type UpdateIdentityParams struct {
	Realname sql.NullString
	Idcard   sql.NullString
	Username string
}

// UpdateIdentity 更新用户实名信息
func (q *Queries) UpdateIdentity(ctx context.Context, arg *UpdateIdentityParams) error {
	_, err := q.db.ExecContext(ctx, updateIdentity, arg.Realname, arg.Idcard, arg.Username)
	return err
}

const updatePasswdByUsername = `-- name: UpdatePasswdByUsername :execlastid
UPDATE
    ` + "`" + `user` + "`" + `
SET
    ` + "`" + `passwd` + "`" + ` = ?
WHERE
    ` + "`" + `username` + "`" + ` = ?
`

type UpdatePasswdByUsernameParams struct {
	Passwd   string
	Username string
}

// UpdatePasswdByUsername 根据用户名更新密码
func (q *Queries) UpdatePasswdByUsername(ctx context.Context, arg *UpdatePasswdByUsernameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updatePasswdByUsername, arg.Passwd, arg.Username)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateUser = `-- name: UpdateUser :exec
UPDATE
    user
SET
    ` + "`" + `nickname` + "`" + ` = ?, ` + "`" + `passwd` + "`" + ` = ?, avatar = ?
where
    ` + "`" + `username` + "`" + ` = ?
`

type UpdateUserParams struct {
	Nickname sql.NullString
	Passwd   string
	Avatar   sql.NullString
	Username string
}

// UpdateUser 用户信息更新
func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Nickname,
		arg.Passwd,
		arg.Avatar,
		arg.Username,
	)
	return err
}
