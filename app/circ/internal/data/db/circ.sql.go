// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: circ.sql

package db

import (
	"context"
	"database/sql"
)

const createRecord = `-- name: CreateRecord :execlastid
INSERT INTO
    circ_record (` + "`" + `transId` + "`" + `, ` + "`" + `objectId` + "`" + `, ` + "`" + `circType` + "`" + `, ` + "`" + `operator` + "`" + `, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, ` + "`" + `formValue` + "`" + `, ` + "`" + `times` + "`" + `, ` + "`" + `status` + "`" + `, ` + "`" + `created_at` + "`" + `)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, now())
`

type CreateRecordParams struct {
	Transid   string
	Objectid  int32
	Circtype  sql.NullString
	Operator  sql.NullString
	From      sql.NullString
	To        sql.NullString
	Formvalue []byte
	Times     int32
	Status    string
}

func (q *Queries) CreateRecord(ctx context.Context, arg *CreateRecordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createRecord,
		arg.Transid,
		arg.Objectid,
		arg.Circtype,
		arg.Operator,
		arg.From,
		arg.To,
		arg.Formvalue,
		arg.Times,
		arg.Status,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getObjOwner = `-- name: GetObjOwner :one
SELECT
    ` + "`" + `to` + "`" + `
FROM
    circ_record
WHERE
    objectId = ? AND status="success"
ORDER BY
    times
DESC LIMIT 1
`

// 获取商品当前owner
func (q *Queries) GetObjOwner(ctx context.Context, objectid int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getObjOwner, objectid)
	var to sql.NullString
	err := row.Scan(&to)
	return to, err
}

const getRecordById = `-- name: GetRecordById :one
SELECT
    id, objectid, circtype, operator, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, created_at, formvalue, times, transid, status
FROM
    circ_record
WHERE
    id = ?
`

// 根据id查找流转记录
func (q *Queries) GetRecordById(ctx context.Context, id int32) (*CircRecord, error) {
	row := q.db.QueryRowContext(ctx, getRecordById, id)
	var i CircRecord
	err := row.Scan(
		&i.ID,
		&i.Objectid,
		&i.Circtype,
		&i.Operator,
		&i.From,
		&i.To,
		&i.CreatedAt,
		&i.Formvalue,
		&i.Times,
		&i.Transid,
		&i.Status,
	)
	return &i, err
}

const getRecordByObjIdDesc = `-- name: GetRecordByObjIdDesc :many
SELECT
    id, objectid, circtype, operator, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, created_at, formvalue, times, transid, status
FROM
    circ_record
WHERE
    objectId = ? AND status="success"
ORDER BY
    times
DESC
`

// 根据流转实体id查找流转记录, 按流转顺序降序排列，最新的在第一个
func (q *Queries) GetRecordByObjIdDesc(ctx context.Context, objectid int32) ([]*CircRecord, error) {
	rows, err := q.db.QueryContext(ctx, getRecordByObjIdDesc, objectid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*CircRecord
	for rows.Next() {
		var i CircRecord
		if err := rows.Scan(
			&i.ID,
			&i.Objectid,
			&i.Circtype,
			&i.Operator,
			&i.From,
			&i.To,
			&i.CreatedAt,
			&i.Formvalue,
			&i.Times,
			&i.Transid,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordByTransId = `-- name: GetRecordByTransId :one
SELECT
    id, objectid, circtype, operator, ` + "`" + `from` + "`" + `, ` + "`" + `to` + "`" + `, created_at, formvalue, times, transid, status
FROM
    circ_record
WHERE transId = ?
`

// 根据transId查找流转记录
func (q *Queries) GetRecordByTransId(ctx context.Context, transid string) (*CircRecord, error) {
	row := q.db.QueryRowContext(ctx, getRecordByTransId, transid)
	var i CircRecord
	err := row.Scan(
		&i.ID,
		&i.Objectid,
		&i.Circtype,
		&i.Operator,
		&i.From,
		&i.To,
		&i.CreatedAt,
		&i.Formvalue,
		&i.Times,
		&i.Transid,
		&i.Status,
	)
	return &i, err
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE
    circ_record
SET
    status=?
WHERE
    transId = ?
`

type UpdateStatusParams struct {
	Status  string
	Transid string
}

// 更新流转记录状态
func (q *Queries) UpdateStatus(ctx context.Context, arg *UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Status, arg.Transid)
	return err
}
