// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: serial.sql

package db

import (
	"context"
	"database/sql"
)

const createSerial = `-- name: CreateSerial :execlastid
INSERT INTO
    serial (product_time, creator, class_id, created_at)
VALUES
    (?, ?, ?, now())
`

type CreateSerialParams struct {
	ProductTime sql.NullTime
	Creator     sql.NullString
	ClassID     sql.NullInt32
}

// 创建一个产品批次
func (q *Queries) CreateSerial(ctx context.Context, arg *CreateSerialParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSerial, arg.ProductTime, arg.Creator, arg.ClassID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getOrgOfSerial = `-- name: GetOrgOfSerial :one
SELECT
    org_id
FROM
    ` + "`" + `class` + "`" + ` JOIN ` + "`" + `serial` + "`" + `
ON
    ` + "`" + `class` + "`" + `.` + "`" + `id` + "`" + ` = ` + "`" + `serial` + "`" + `.` + "`" + `class_id` + "`" + `
WHERE
    ` + "`" + `serial` + "`" + `.` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) GetOrgOfSerial(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrgOfSerial, id)
	var org_id int32
	err := row.Scan(&org_id)
	return org_id, err
}

const getSerialById = `-- name: GetSerialById :one
SELECT
    id, product_time, status, created_at, creator, class_id
FROM
    serial
WHERE id = ?
`

func (q *Queries) GetSerialById(ctx context.Context, id int32) (*Serial, error) {
	row := q.db.QueryRowContext(ctx, getSerialById, id)
	var i Serial
	err := row.Scan(
		&i.ID,
		&i.ProductTime,
		&i.Status,
		&i.CreatedAt,
		&i.Creator,
		&i.ClassID,
	)
	return &i, err
}

const listGoodsSerial = `-- name: ListGoodsSerial :many
SELECT
    s.id, s.product_time, s.status, s.created_at, s.creator, s.class_id, c.id, c.name, c.des, c.status, c.created_at, c.creator, c.material_id, c.org_id, c.tm
FROM
    ` + "`" + `class` + "`" + ` c JOIN ` + "`" + `serial` + "`" + ` s
ON
    c.` + "`" + `id` + "`" + ` = s.` + "`" + `class_id` + "`" + `
WHERE
    c.` + "`" + `org_id` + "`" + ` = ?
LIMIT ?, ?
`

type ListGoodsSerialParams struct {
	OrgID  int32
	Offset int32
	Limit  int32
}

type ListGoodsSerialRow struct {
	ID          int32
	ProductTime sql.NullTime
	Status      sql.NullString
	CreatedAt   sql.NullTime
	Creator     sql.NullString
	ClassID     sql.NullInt32
	ID_2        int32
	Name        sql.NullString
	Des         []byte
	Status_2    sql.NullString
	CreatedAt_2 sql.NullTime
	Creator_2   sql.NullString
	MaterialID  int32
	OrgID       int32
	Tm          sql.NullString
}

// 列出产品批次
func (q *Queries) ListGoodsSerial(ctx context.Context, arg *ListGoodsSerialParams) ([]*ListGoodsSerialRow, error) {
	rows, err := q.db.QueryContext(ctx, listGoodsSerial, arg.OrgID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListGoodsSerialRow
	for rows.Next() {
		var i ListGoodsSerialRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductTime,
			&i.Status,
			&i.CreatedAt,
			&i.Creator,
			&i.ClassID,
			&i.ID_2,
			&i.Name,
			&i.Des,
			&i.Status_2,
			&i.CreatedAt_2,
			&i.Creator_2,
			&i.MaterialID,
			&i.OrgID,
			&i.Tm,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoodSerial = `-- name: UpdateGoodSerial :exec
UPDATE
    serial
SET product_time = ?, creator = ?
WHERE
    class_id = ?
`

type UpdateGoodSerialParams struct {
	ProductTime sql.NullTime
	Creator     sql.NullString
	ClassID     sql.NullInt32
}

// 更新产品批次
func (q *Queries) UpdateGoodSerial(ctx context.Context, arg *UpdateGoodSerialParams) error {
	_, err := q.db.ExecContext(ctx, updateGoodSerial, arg.ProductTime, arg.Creator, arg.ClassID)
	return err
}
