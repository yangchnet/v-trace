// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: goods.sql

package db

import (
	"context"
	"database/sql"
)

const createGoods = `-- name: CreateGoods :execlastid
INSERT INTO
    goods (status, creator, serial_id, created_at)
VALUES
    (?, ?, ?, now())
`

type CreateGoodsParams struct {
	Status   sql.NullString
	Creator  sql.NullString
	SerialID sql.NullInt32
}

// 创建一个产品
func (q *Queries) CreateGoods(ctx context.Context, arg *CreateGoodsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createGoods, arg.Status, arg.Creator, arg.SerialID)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getGoodsById = `-- name: GetGoodsById :one
SELECT
    id, status, created_at, creator, serial_id
FROM
    goods
WHERE id = ?
`

func (q *Queries) GetGoodsById(ctx context.Context, id int32) (*Good, error) {
	row := q.db.QueryRowContext(ctx, getGoodsById, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.Creator,
		&i.SerialID,
	)
	return &i, err
}

const getOrgOfGoods = `-- name: GetOrgOfGoods :one
SELECT
    org_id
FROM ` + "`" + `class` + "`" + ` c
    INNER JOIN ` + "`" + `serial` + "`" + ` s ON c.id = s.` + "`" + `class_id` + "`" + `
    INNER JOIN ` + "`" + `goods` + "`" + ` g ON s.id = g.` + "`" + `serial_id` + "`" + `
WHERE
    g.id = ?
`

// 获取产品所属企业
func (q *Queries) GetOrgOfGoods(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrgOfGoods, id)
	var org_id int32
	err := row.Scan(&org_id)
	return org_id, err
}

const listGoods = `-- name: ListGoods :many
SELECT
    g.id, g.status, g.created_at, g.creator, g.serial_id, s.id, s.product_time, s.status, s.created_at, s.creator, s.class_id, c.id, c.name, c.des, c.status, c.created_at, c.creator, c.material_id, c.org_id, c.tm
FROM ` + "`" + `class` + "`" + ` c
    INNER JOIN ` + "`" + `serial` + "`" + ` s ON c.id = s.` + "`" + `class_id` + "`" + `
    INNER JOIN ` + "`" + `goods` + "`" + ` g ON s.id = g.` + "`" + `serial_id` + "`" + `
WHERE
    c.org_id = ?
LIMIT ?, ?
`

type ListGoodsParams struct {
	OrgID  int32
	Offset int32
	Limit  int32
}

type ListGoodsRow struct {
	ID          int32
	Status      sql.NullString
	CreatedAt   sql.NullTime
	Creator     sql.NullString
	SerialID    sql.NullInt32
	ID_2        int32
	ProductTime sql.NullTime
	Status_2    sql.NullString
	CreatedAt_2 sql.NullTime
	Creator_2   sql.NullString
	ClassID     sql.NullInt32
	ID_3        int32
	Name        sql.NullString
	Des         []byte
	Status_3    sql.NullString
	CreatedAt_3 sql.NullTime
	Creator_3   sql.NullString
	MaterialID  int32
	OrgID       int32
	Tm          sql.NullString
}

func (q *Queries) ListGoods(ctx context.Context, arg *ListGoodsParams) ([]*ListGoodsRow, error) {
	rows, err := q.db.QueryContext(ctx, listGoods, arg.OrgID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListGoodsRow
	for rows.Next() {
		var i ListGoodsRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.CreatedAt,
			&i.Creator,
			&i.SerialID,
			&i.ID_2,
			&i.ProductTime,
			&i.Status_2,
			&i.CreatedAt_2,
			&i.Creator_2,
			&i.ClassID,
			&i.ID_3,
			&i.Name,
			&i.Des,
			&i.Status_3,
			&i.CreatedAt_3,
			&i.Creator_3,
			&i.MaterialID,
			&i.OrgID,
			&i.Tm,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGood = `-- name: UpdateGood :exec
UPDATE
    goods
SET status = ?, creator = ?
WHERE
    serial_id = ?
`

type UpdateGoodParams struct {
	Status   sql.NullString
	Creator  sql.NullString
	SerialID sql.NullInt32
}

// 更新产品信息
func (q *Queries) UpdateGood(ctx context.Context, arg *UpdateGoodParams) error {
	_, err := q.db.ExecContext(ctx, updateGood, arg.Status, arg.Creator, arg.SerialID)
	return err
}
