// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: class.sql

package db

import (
	"context"
	"database/sql"
)

const createClass = `-- name: CreateClass :execlastid
INSERT INTO
    class (name, des, status, creator, material_id, org_id, tm, created_at)
VALUES
    (?, ?, ?, ?, ?, ?, ?, now())
`

type CreateClassParams struct {
	Name       sql.NullString
	Des        []byte
	Status     sql.NullString
	Creator    sql.NullString
	MaterialID int32
	OrgID      int32
	Tm         sql.NullString
}

// 创建一个产品类别记录
func (q *Queries) CreateClass(ctx context.Context, arg *CreateClassParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createClass,
		arg.Name,
		arg.Des,
		arg.Status,
		arg.Creator,
		arg.MaterialID,
		arg.OrgID,
		arg.Tm,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getClassById = `-- name: GetClassById :one
SELECT
    id, name, des, status, created_at, creator, material_id, org_id, tm
FROM
    class
WHERE id = ?
`

// 根据id获取产品类别
func (q *Queries) GetClassById(ctx context.Context, id int32) (*Class, error) {
	row := q.db.QueryRowContext(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Des,
		&i.Status,
		&i.CreatedAt,
		&i.Creator,
		&i.MaterialID,
		&i.OrgID,
		&i.Tm,
	)
	return &i, err
}

const getOrgOfClass = `-- name: GetOrgOfClass :one
SELECT
    org_id
FROM
    ` + "`" + `class` + "`" + `
WHERE
    id = ?
`

// 获取产品所属企业
func (q *Queries) GetOrgOfClass(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOrgOfClass, id)
	var org_id int32
	err := row.Scan(&org_id)
	return org_id, err
}

const listGoodClass = `-- name: ListGoodClass :many
SELECT
    id, name, des, status, created_at, creator, material_id, org_id, tm
FROM
    ` + "`" + `class` + "`" + `
WHERE
    org_id = ?
LIMIT  ?, ?
`

type ListGoodClassParams struct {
	OrgID  int32
	Offset int32
	Limit  int32
}

// 列出产品类型
func (q *Queries) ListGoodClass(ctx context.Context, arg *ListGoodClassParams) ([]*Class, error) {
	rows, err := q.db.QueryContext(ctx, listGoodClass, arg.OrgID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Des,
			&i.Status,
			&i.CreatedAt,
			&i.Creator,
			&i.MaterialID,
			&i.OrgID,
			&i.Tm,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoodClass = `-- name: UpdateGoodClass :exec
UPDATE
    class
SET name = ?, des = ?, status = ?, creator = ?, org_id = ?, tm = ?
WHERE
    material_id = ?
`

type UpdateGoodClassParams struct {
	Name       sql.NullString
	Des        []byte
	Status     sql.NullString
	Creator    sql.NullString
	OrgID      int32
	Tm         sql.NullString
	MaterialID int32
}

// 更新产品类型
func (q *Queries) UpdateGoodClass(ctx context.Context, arg *UpdateGoodClassParams) error {
	_, err := q.db.ExecContext(ctx, updateGoodClass,
		arg.Name,
		arg.Des,
		arg.Status,
		arg.Creator,
		arg.OrgID,
		arg.Tm,
		arg.MaterialID,
	)
	return err
}
