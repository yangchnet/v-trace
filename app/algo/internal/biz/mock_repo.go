// Code generated by MockGen. DO NOT EDIT.
// Source: gitee.com/qciip-icp/v-trace/app/algo/internal/biz (interfaces: AlgoRepo)

// Package biz is a generated GoMock package.
package biz

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "gitee.com/qciip-icp/v-trace/app/algo/internal/data/db"
	gomock "github.com/golang/mock/gomock"
)

// MockAlgoRepo is a mock of AlgoRepo interface.
type MockAlgoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAlgoRepoMockRecorder
}

// MockAlgoRepoMockRecorder is the mock recorder for MockAlgoRepo.
type MockAlgoRepoMockRecorder struct {
	mock *MockAlgoRepo
}

// NewMockAlgoRepo creates a new mock instance.
func NewMockAlgoRepo(ctrl *gomock.Controller) *MockAlgoRepo {
	mock := &MockAlgoRepo{ctrl: ctrl}
	mock.recorder = &MockAlgoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlgoRepo) EXPECT() *MockAlgoRepoMockRecorder {
	return m.recorder
}

// ExecTx mocks base method.
func (m *MockAlgoRepo) ExecTx(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockAlgoRepoMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockAlgoRepo)(nil).ExecTx), arg0, arg1)
}

// GetAvaiableModel mocks base method.
func (m *MockAlgoRepo) GetAvaiableModel(arg0 context.Context, arg1 sql.NullInt32) ([]*db.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvaiableModel", arg0, arg1)
	ret0, _ := ret[0].([]*db.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvaiableModel indicates an expected call of GetAvaiableModel.
func (mr *MockAlgoRepoMockRecorder) GetAvaiableModel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvaiableModel", reflect.TypeOf((*MockAlgoRepo)(nil).GetAvaiableModel), arg0, arg1)
}

// GetMaterialByID mocks base method.
func (m *MockAlgoRepo) GetMaterialByID(arg0 context.Context, arg1 int32) (*db.Material, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Material)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialByID indicates an expected call of GetMaterialByID.
func (mr *MockAlgoRepoMockRecorder) GetMaterialByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialByID", reflect.TypeOf((*MockAlgoRepo)(nil).GetMaterialByID), arg0, arg1)
}

// GetMaterialID mocks base method.
func (m *MockAlgoRepo) GetMaterialID(arg0 context.Context, arg1 *db.GetMaterialIDParams) (sql.NullInt32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialID", arg0, arg1)
	ret0, _ := ret[0].(sql.NullInt32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialID indicates an expected call of GetMaterialID.
func (mr *MockAlgoRepoMockRecorder) GetMaterialID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialID", reflect.TypeOf((*MockAlgoRepo)(nil).GetMaterialID), arg0, arg1)
}

// GetModelByID mocks base method.
func (m *MockAlgoRepo) GetModelByID(arg0 context.Context, arg1 int32) (*db.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByID", arg0, arg1)
	ret0, _ := ret[0].(*db.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByID indicates an expected call of GetModelByID.
func (mr *MockAlgoRepoMockRecorder) GetModelByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByID", reflect.TypeOf((*MockAlgoRepo)(nil).GetModelByID), arg0, arg1)
}

// GetModelByName mocks base method.
func (m *MockAlgoRepo) GetModelByName(arg0 context.Context, arg1 sql.NullString) (*db.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1)
	ret0, _ := ret[0].(*db.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockAlgoRepoMockRecorder) GetModelByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockAlgoRepo)(nil).GetModelByName), arg0, arg1)
}

// GetRelationByMaterial mocks base method.
func (m *MockAlgoRepo) GetRelationByMaterial(arg0 context.Context, arg1 sql.NullInt32) ([]*db.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationByMaterial", arg0, arg1)
	ret0, _ := ret[0].([]*db.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationByMaterial indicates an expected call of GetRelationByMaterial.
func (mr *MockAlgoRepoMockRecorder) GetRelationByMaterial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationByMaterial", reflect.TypeOf((*MockAlgoRepo)(nil).GetRelationByMaterial), arg0, arg1)
}

// ListMaterials mocks base method.
func (m *MockAlgoRepo) ListMaterials(arg0 context.Context) ([]*db.Material, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaterials", arg0)
	ret0, _ := ret[0].([]*db.Material)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaterials indicates an expected call of ListMaterials.
func (mr *MockAlgoRepoMockRecorder) ListMaterials(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaterials", reflect.TypeOf((*MockAlgoRepo)(nil).ListMaterials), arg0)
}

// ListModels mocks base method.
func (m *MockAlgoRepo) ListModels(arg0 context.Context) ([]*db.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", arg0)
	ret0, _ := ret[0].([]*db.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockAlgoRepoMockRecorder) ListModels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockAlgoRepo)(nil).ListModels), arg0)
}

// UpdateModelStatus mocks base method.
func (m *MockAlgoRepo) UpdateModelStatus(arg0 context.Context, arg1 *db.UpdateModelStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelStatus indicates an expected call of UpdateModelStatus.
func (mr *MockAlgoRepoMockRecorder) UpdateModelStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelStatus", reflect.TypeOf((*MockAlgoRepo)(nil).UpdateModelStatus), arg0, arg1)
}
