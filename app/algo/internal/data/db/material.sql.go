// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: material.sql

package db

import (
	"context"
)

const getMaterialByID = `-- name: GetMaterialByID :one
SELECT
    id, name, alias, des
FROM
    material
WHERE
    id = ?
`

func (q *Queries) GetMaterialByID(ctx context.Context, id int32) (*Material, error) {
	row := q.db.QueryRowContext(ctx, getMaterialByID, id)
	var i Material
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Alias,
		&i.Des,
	)
	return &i, err
}

const listMaterials = `-- name: ListMaterials :many
SELECT id, name, alias, des from material
`

func (q *Queries) ListMaterials(ctx context.Context) ([]*Material, error) {
	rows, err := q.db.QueryContext(ctx, listMaterials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Material
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Alias,
			&i.Des,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
