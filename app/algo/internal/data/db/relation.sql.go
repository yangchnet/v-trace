// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: relation.sql

package db

import (
	"context"
	"database/sql"
)

const getAvaiableModel = `-- name: GetAvaiableModel :many
SELECT
    a.id, a.name, a.version, a.status, a.des, a.metadata
FROM
    model a JOIN relation b
ON
    a.id = b.model_id
WHERE
    b.material_id = ?
`

// GetAvaiableModel 根据material id获取其可用的模型
func (q *Queries) GetAvaiableModel(ctx context.Context, materialID sql.NullInt32) ([]*Model, error) {
	rows, err := q.db.QueryContext(ctx, getAvaiableModel, materialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Model
	for rows.Next() {
		var i Model
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Version,
			&i.Status,
			&i.Des,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaterialID = `-- name: GetMaterialID :one
SELECT
    material_id
FROM
    relation
WHERE
    ` + "`" + `model_id` + "`" + ` = ? AND ` + "`" + `index` + "`" + ` = ?
`

type GetMaterialIDParams struct {
	ModelID sql.NullInt32 `json:"model_id"`
	Index   sql.NullInt32 `json:"index"`
}

// 根据model id和index获取条目
func (q *Queries) GetMaterialID(ctx context.Context, arg *GetMaterialIDParams) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getMaterialID, arg.ModelID, arg.Index)
	var material_id sql.NullInt32
	err := row.Scan(&material_id)
	return material_id, err
}

const getRelationByMaterial = `-- name: GetRelationByMaterial :many
SELECT
    id, model_id, material_id, ` + "`" + `index` + "`" + `
FROM
    relation
WHERE
   material_id = ?
`

// 根据material获取条目
func (q *Queries) GetRelationByMaterial(ctx context.Context, materialID sql.NullInt32) ([]*Relation, error) {
	rows, err := q.db.QueryContext(ctx, getRelationByMaterial, materialID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Relation
	for rows.Next() {
		var i Relation
		if err := rows.Scan(
			&i.ID,
			&i.ModelID,
			&i.MaterialID,
			&i.Index,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
